variables:
  PREFIX: qa_kubernetes_orchestration
  JENKINS_URL: ''
  JOB_NAME_CLEAN: ''
  JOB_NAME_UPDATE: ''
  JENKINS_USER: ''
  JENKINS_PASS: ''
  PROJECT: ""
  DEPLOY_SCRIPT_APP: /scripts/external_platform_library_builtIn/deploy\_with\_deployer.py
  KUBECTL: /builds/PROD.Platform.HA/Infra.Automation/binary/kubectl
  KUBECONFIG: $QA_KUBER_KUBECONFIG
  PYTHON_IMAGE: ''
  TRIGGER_TOKEN: ''
  TRIGGER_TOKEN_OPS_PORT: ''
  MAX_ATTEMPTS: 100
  TIMEOUT_IN_SECONDS: 600
  #-------------------------------------------CCI--------------------------------------------------
  CCI_USER: ${CCI_CLIET_ID}
  CCI_PASSWORD: ${CCI_SECRET}
  CCI_INTEGRATION: "true"
  RELEASE: "Infra 2024.4 Sprint 2"
  #-------------------------------------------Deployer--------------------------------------------------
  APP_DEPLOYER_URL: ''
  APP_DEPLOYER_USER: ''
  APP_DEPLOYER_PASS: ''
  #-----------------------------------------Services-----------------------------------------------
  #stage1
  MONITORING_INSTALL: "false"
  PG_INSTALL: "true"
  OPENSEARCH_INSTALL: "true"
  CASSANDRA_INSTALL: "true"
  MONGO_INSTALL: "true"
  LOGGING_INSTALL: "false"
  ZOOKEEPER_INSTALL: "true"
  #stage2
  CONSUL_INSTALL: "true"
  PROFILER_INSTALL: "true"
  JAEGER_INSTALL: "true"
  REDIS_INSTALL: "true"
  RABBIT_INSTALL: "true"
  KAFKA_INSTALL: "true"
  CLICKHOUSE_INSTALL: "true"
  #stage3
  GPEENPLUM_INSTALL: "false"
  SPARK_INSTALL: "true"
  ARANGO_INSTALL: "true"
  EXT_LOGGING_INSTALL: "true"
  AIRFLOW_INSTALL: "true"
  MISTRAL_INSTALL: "true"
  STREAMING_INSTALL: "true"

  NAMESPACES_NOT_BE_CLEANED: "prometheus-operator, cert-manager, monitoring, postgres, dbaas, test-minio-gateway-nas, opensearch-cloud, cassandra-operations, vault, clickhouse, postgres-np, zookeeper-service, logging-operator"

stages:
  - stage0
  - stage1
  - stage2
  - stage3

default:
  before_script:
    - pip config set global.index-url qubership.org/api/pypi/pypi_python_org.pypi.proxy/simple
    - pip config set global.trusted-host dockerhub.qubership.org
    - python3 -m pip install --upgrade pip
    - pip install --no-cache-dir -r requirements.txt
    - apk add --update curl && rm -rf /var/cache/apk/*
    - export CCI_INTEGRATION=${CCI_INTEGRATION}
    - chmod +x $KUBECTL
    - echo "$KUBECONFIG" > kubeconfig.env
    - export KUBECONFIG=/builds/PROD.Platform.HA/Infra.Automation/kubeconfig.env

.test-case: &test-case
  image: ${PYTHON_IMAGE}
  tags:
    - ''
  allow_failure: true
  when: manual

CCI Integration:
  <<: *test-case
  stage: stage0
  script:
    - python3 ./scripts/cci_integration.py --release="${RELEASE}" --cci_user="${CCI_USER}" --cci_password="${CCI_PASSWORD}"  --output_file="versions.yml"  --cci_mode ${CCI_INTEGRATION}
  artifacts:
    paths:
      - versions.yml
  only: { variables: [ $CCI_INTEGRATION == "true" ] }

Scale resources in namespaces:
  <<: *test-case
  stage: stage0
  script:
    - chmod +x ./scripts/scale_resources.sh
    - exclusions="$(tr -d ' ' <<< "$NAMESPACES_NOT_BE_CLEANED")"
    - ./scripts/scale_resources.sh $exclusions

1-Monitoring:
  <<: *test-case
  stage: stage1
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/monitoring.yml" --service_main="MONITORING"
    - source variables.env
    - echo $VARIABLES
    - BRANCH="monitoring"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $MONITORING_INSTALL == "true" ] }

2-PG:
  <<: *test-case
  stage: stage1
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/pg.yml" --service_main="postgres" --service_suppl="postgres-services"
    - source variables.env
    - echo $VARIABLES
    - BRANCH="postgres"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $PG_INSTALL == "true" ] }

3-Opensearch:
  <<: *test-case
  stage: stage1
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/opensearch.yml" --service_main="opensearch-service"
    - source variables.env
    - echo $VARIABLES
    - BRANCH="opensearch"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $OPENSEARCH_INSTALL == "true" ] }

4-Cassandra:
  <<: *test-case
  stage: stage1
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/cassandra.yml" --service_main="CASSANDRA" --service_suppl="cassandra-services"
    - source variables.env
    - echo $VARIABLES
    - BRANCH="cassandra"
    - echo $VARIABLES
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $CASSANDRA_INSTALL == "true" ] }

5-Mongo:
  <<: *test-case
  stage: stage1
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/mongo.yml" --service_main="mongodb" --service_suppl="mongodb-services"
    - source variables.env
    - echo $VARIABLES
    - BRANCH="mongo"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $MONGO_INSTALL == "true" ] }

6-Logging:
  <<: *test-case
  stage: stage1
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/logging.yml" --service_main="logging-service"
    - source variables.env
    - echo $VARIABLES
    - BRANCH="logging-automated"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $LOGGING_INSTALL == "true" ] }

7-Zookeeper:
  <<: *test-case
  stage: stage1
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/zookeeper.yml" --service_main="zookeeper-service"
    - source variables.env
    - echo $VARIABLES
    - BRANCH="zookeeper"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $ZOOKEEPER_INSTALL == "true" ] }

8-Consul:
  <<: *test-case
  stage: stage2
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/consul.yml" --service_main="consul-service"
    - source variables.env
    - echo $VARIABLES
    - BRANCH="consul"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $CONSUL_INSTALL == "true" ] }

9-Profiler:
  <<: *test-case
  stage: stage2
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/profiler.yml" --service_main="Cloud-Diagnostic-Toolset"
    - source variables.env
    - BRANCH="profiler-automated"
    # - BRANCH="profiler-automated_update"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $PROFILER_INSTALL == "true" ] }

10-Jaeger:
  <<: *test-case
  stage: stage2
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/jaeger.yml" --service_main="jaeger"
    - source variables.env
    - BRANCH="jaeger"
    # - BRANCH="jaeger_update"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $JAEGER_INSTALL == "true" ] }

11-Redis:
  <<: *test-case
  stage: stage2
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/redis.yml" --service_main="dbaas-redis"
    - source variables.env
    - BRANCH="redis"
    # - BRANCH="redis_update"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $REDIS_INSTALL == "true" ] }

12-Rabbit:
  <<: *test-case
  stage: stage2
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/rabbit.yml" --service_main="rabbitmq"
    - source variables.env
    - echo $VARIABLES
    - BRANCH="rabbitmq"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $RABBIT_INSTALL == "true" ] }

13-Kafka:
  <<: *test-case
  stage: stage2
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/kafka.yml" --service_main="kafka" --service_suppl="kafka-services"
    - source variables.env
    - echo $VARIABLES
    - BRANCH="kafka"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $KAFKA_INSTALL == "true" ] }

14-Clickhouse:
  <<: *test-case
  stage: stage2
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/clickhouse.yml" --service_main="clickhouse" --service_suppl="clickhouse-services"
    - source variables.env
    - BRANCH="clickhouse"
    # - BRANCH="clickhouse__update"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $CLICKHOUSE_INSTALL == "true" ] }

15-Greenplum:
  <<: *test-case
  stage: stage3
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/greenplum.yml" --service_main="greenplumdb-operator"
    - source variables.env
    - BRANCH="greenplum"
    # - BRANCH="greenplum_update"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $GPEENPLUM_INSTALL == "true" ] }

16-Spark:
  <<: *test-case
  stage: stage3
  script:
    - CONFIG="fenrir_config.yml"
    - python3 ./scripts/generate_variables.py -f="./variables/spark.yml" --service_main="spark-operator-gcp" --config=$CONFIG
    - source variables.env
    - BRANCH="spark"
    # - BRANCH="spark_update"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $SPARK_INSTALL == "true" ] }

17-Arango:
  <<: *test-case
  stage: stage3
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/arango.yml" --service_main="arangodb-operator"
    - source variables.env
    - BRANCH="arangodb"
    # - BRANCH="arangodb_update"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $ARANGO_INSTALL == "true" ] }

18-External Logging:
  <<: *test-case
  stage: stage3
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/ext_logging.yml"
    - source variables.env
    - BRANCH="auto"
    - RESPONSE=$(curl -X POST --fail -F token=$TRIGGER_TOKEN_OPS_PORT -F ref=$BRANCH http://***.***.***.***/api/v4/projects/13/trigger/pipeline)
    - echo "$RESPONSE"
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'http://***.***.***.***/qa-group/logging-pipeline/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS" "http://***.***.***.***/api/v4/projects/13"
  only: { variables: [ $EXT_LOGGING_INSTALL == "true" ] }

19-Airflow:
  <<: *test-case
  stage: stage3
  script:
    - CONFIG="fenrir_config.yml"
    - python3 ./scripts/generate_variables.py -f="./variables/airflow.yml" --service_main="airflow" --config=$CONFIG
    - source variables.env
    - BRANCH="airflow"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $AIRFLOW_INSTALL == "true" ] }

20-Mistral:
  <<: *test-case
  stage: stage3
  script:
    - CONFIG="fenrir_config.yml"
    - python3 ./scripts/generate_variables.py -f="./variables/mistral.yml" --service_main="mistral" --config=$CONFIG
    - source variables.env
    - BRANCH="Mistral"
    # - BRANCH="Mistral_update"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $MISTRAL_INSTALL == "true" ] }

21-Streaming:
  <<: *test-case
  stage: stage3
  script:
    - python3 ./scripts/generate_variables.py -f="./variables/streaming.yml" --service_main="streaming-service"
    - source variables.env
    - BRANCH="streaming"
    - RESPONSE=$(curl -X POST $VARIABLES --fail -F token=$TRIGGER_TOKEN -F ref=$BRANCH https://git.qubership.org/api/v4/projects/20633/trigger/pipeline)
    - PIPE_ID=$(echo "$RESPONSE" | grep -o '^{"id":[0-9]*' |  sed 's/^{"id"://')
    - echo LINK TO TRIGGERED PIPELINE:' 'https://gl.qubership.org/PROD.Platform.HA/Infra.Automation/-/pipelines/$PIPE_ID
    - bash ./scripts/check_pipeline_status.sh "$PIPE_ID" "$MAX_ATTEMPTS" "$TIMEOUT_IN_SECONDS"
  only: { variables: [ $STREAMING_INSTALL == "true" ] }


