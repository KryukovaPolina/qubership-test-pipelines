global:
  privilegedRights: true
  profile: "small"
role:
  install: true
roleBinding:
  install: true
#publicCloudName: ""
monitoringOperator:
  name: monitoring-operator
  clusterRole:
    install: true
  resources: {}
  #securityContext: {}
  #imagePullSecrets: []
  pprof:
    install: true
    containerPort: 9180
    service:
      type: ClusterIP
      port: 9180
      portName: pprof
      #annotations: {}
      #labels: {}
  serviceAccount:
    install: true
    name: "monitoring-operator"
  #tolerations: []
  #nodeSelector: {}
  #affinity: {}
  #annotations: {}
  #labels: {}
  podMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings:
      - action: drop
        regex: controller_runtime_reconcile_time_seconds_bucket;(0.005|0.01|0.025|0.05|0.15|0.2|0.25|0.3|0.35|0.4|0.45|0.6|0.7|0.8|0.9|1.25|1.5|1.75|2.5|3|3.5|4|4.5|6|7|8|9|15|20|25|40|50)
        sourceLabels: ['__name__', 'le']
    #relabelings: []
grafana:
  install: true
  ingress:
    host: "grafana.testdomain.local"
victoriametrics:
  vmOperator:
    install: true
  vmAgent:
    install: true
    ingress:
      host: "vmagent.testdomain.local"
      install: true
  vmSingle:
    install: true
    ingress:
      install: true
      host: "vmsingle.testdomain.local"
    storage:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: standard
  vmAlertManager:
    install: true
    ingress:
      host: "vmalertmanager.testdomain.local"
      install: true
  vmAlert:
    install: true
    ingress:
      host: "vmalert.testdomain.local"
      install: true
alertManager:
  install: true
  #paused: false
  port: 30903
  podMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    #metricRelabelings: []
    #relabelings: []
  #containers: []
  replicas: 1
  ingress: {
    host: "alertmanager.testdomain.local"
  }
  #securityContext: {}
  #tolerations: []
  #nodeSelector: {}
  #affinity: {}
  #annotations: {}
  #labels: {}
  serviceAccount:
    #annotations: {}
    #labels: {}
kubeStateMetrics:
  install: true
  paused: false
  serviceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    #metricRelabelings: []
    #relabelings: []
  #resources: {}
  #securityContext: {}
  #tolerations: []
  #nodeSelector: {}
  #affinity: {}
  #annotations: {}
  #labels: {}
  serviceAccount:
    #annotations: {}
    #labels: {}
nodeExporter:
  install: true
  setupSecurityContext: true
  paused: false
  port: 9900
  serviceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    #metricRelabelings: []
    #relabelings: []
  #nodeSelector: {}
  #annotations: {}
  #labels: {}
  #resources: {}
  #securityContext: {}
  #tolerations: []
  #affinity: {}
  serviceAccount:
    #annotations: {}
    #labels: {}
  collectorTextfileDirectory: /var/spool/monitoring
  #extraArgs: []
# Integration allows setting up Platform Monitoring integration with other monitoring tools and public clouds.
# Currently, supports:
#   * Google Cloud Platform (integration with Google Cloud Operations)
#   * Jaeger (a distributed tracing platform)
integration:
  jaeger:
    createGrafanaDataSource: false
  clickHouse:
    createGrafanaDataSource: false

#oAuthProxy: {}

kubernetesMonitors:
  etcdServiceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings: []
    relabelings: []
  apiserverServiceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings:
      - action: keep
        sourceLabels: ['__name__']
        regex: 'apiserver_request_(.*)|apiserver_storage_(.*)|workqueue_(.*)|etcd_(.*)|process_(.*)|go_(.*)'
      - action: drop
        regex: 'apiserver_request_duration_seconds_bucket;(0.005|0.05|0.8|1.25|3|4|5|6|8|15|20|45)'
        sourceLabels: ['__name__', 'le']
      - action: drop
        regex: 'etcd_request_duration_seconds_bucket;(0.005|0.8|1.25|1.5|3|4|5|6|8|15|20|45)'
        sourceLabels: ['__name__', 'le']
      - action: drop
        regex: 'apiserver_request_(slo|sli)_duration_seconds_.*'
        sourceLabels: ['__name__']
    relabelings:
      - action: replace
        sourceLabels: ['job']
        targetLabel: 'job'
        replacement: 'kube-apiserver'
  kubeControllerManagerServiceMonitor:
    install: false
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings:
      - action: drop
        regex: etcd_(debugging|disk|request|server).*
        sourceLabels: ['__name__']
    relabelings:
      - action: replace
        regex: (.+)(?::\d+)
        replacement: $1:10252
        sourceLabels: ['__address__']
        targetLabel: __address__
  kubeSchedulerServiceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings: []
    relabelings:
      - action: replace
        regex: (.+)(?::\d+)
        replacement: $1:10251
        sourceLabels: ['__address__']
        targetLabel: __address__
  kubeletServiceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings:
      - action: drop
        regex: container_start_time_seconds;\/metrics\/resource
        separator: ;
        sourceLabels: ['__name__', 'metrics_path']
      - action: labeldrop
        regex: metrics_path
      - action: replace
        sourceLabels: ['pod_name']
        targetLabel: pod
        regex: (.+)
      - action: replace
        sourceLabels: ['container_name']
        targetLabel: container
        regex: (.+)
      - action: labeldrop
        regex: pod_name
      - action: labeldrop
        regex: container_name
      - action: replace
        regex: 'kubelet_running_pods'
        replacement: 'kubelet_running_pod_count'
        sourceLabels: ['__name__']
        targetLabel: __name__
      - action: replace
        regex: 'kubelet_running_containers'
        replacement: 'kubelet_running_container_count'
        sourceLabels: ['__name__']
        targetLabel: __name__
      - action: drop
        regex: 'container_tasks_state'
        sourceLabels: ['__name__']
      - action: drop
        regex: 'container_blkio_device_usage_total'
        sourceLabels: ['__name__']
      - action: drop
        regex: 'container_memory_failures_total'
        sourceLabels: ['__name__']
      - action: labeldrop
        regex: id
    relabelings:
      - action: replace
        regex: (\/metrics\/resource)
        replacement: $1
        sourceLabels:
          - __metrics_path__
        targetLabel: metrics_path
  coreDnsServiceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings: []
    relabelings:
      - action: replace
        regex: (.*)
        replacement: $1
        sourceLabels: ['__meta_kubernetes_pod_node_name']
        targetLabel: node
  nginxIngressPodMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings:
      - action: drop
        regex: 'nginx_ingress_controller_response_size_bucket'
        sourceLabels: ['__name__']
      - action: drop
        regex: 'nginx_ingress_controller_request_size_bucket'
        sourceLabels: ['__name__']
      - action: drop
        regex: 'nginx_ingress_controller_connect_duration_seconds_bucket'
        sourceLabels: ['__name__']
      - action: drop
        regex: 'nginx_ingress_controller_header_duration_seconds_bucket'
        sourceLabels: ['__name__']
      - action: drop
        regex: 'nginx_ingress_controller_bytes_sent_bucket'
        sourceLabels: ['__name__']
      - action: drop
        regex: 'nginx_ingress_controller_orphan_ingress'
        sourceLabels: ['__name__']
    relabelings:
      - action: replace
        regex: (.*)
        replacement: $1
        sourceLabels: ['__meta_kubernetes_pod_node_name']
        targetLabel: node
  openshiftApiserverServiceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings:
      - action: drop
        regex: etcd_(debugging|disk|server).*
        sourceLabels:
          - __name__
      - action: drop
        regex: apiserver_admission_controller_admission_latencies_seconds_.*
        sourceLabels:
          - __name__
      - action: drop
        regex: apiserver_admission_step_admission_latencies_seconds_.*
        sourceLabels:
          - __name__
      - action: drop
        regex: >-
          apiserver_request_duration_seconds_bucket;(0.15|0.25|0.3|0.35|0.4|0.45|0.6|0.7|0.8|0.9|1.25|1.5|1.75|2.5|3|3.5|4.5|6|7|8|9|15|25|30|50)
        sourceLabels:
          - __name__
          - le
    relabelings:
      - action: replace
        replacement: openshift-apiserver
        targetLabel: apiserver
  openshiftApiserverOperatorServiceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings: []
    relabelings: []
  openshiftClusterVersionOperatorServiceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings: []
    relabelings: []
  openshiftStatemetricsServiceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings: []
    relabelings: []
  openshiftHAProxyServiceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings: []
    relabelings: []

grafanaDashboards:
  install: true
  list:
    - alerts-overview
    - core-dns-dashboard
    - etcd-dashboard
    - govm-processes
    - home-dashboard
    - ingress-list-of-ingresses
    - ingress-nginx-controller
    - ingress-request-handling-performance
    - jvm-processes
    - kubernetes-cluster-overview
    - kubernetes-kubelet
    - kubernetes-apiserver
    - kubernetes-distribution-by-labels
    - kubernetes-namespace-resources
    - kubernetes-nodes-resources
    - kubernetes-pod-resources
    - kubernetes-pods-distribution-by-node
    - kubernetes-top-resources
    - node-details
    - overall-platform-health
    - prometheus-cardinality-explorer
    - alertmanager-overview
    - grafana-overview
    - tls-status
    - ha-services

prometheusRules:
  install: true
  ruleGroups:
    - SelfMonitoring
    - AlertManager
    - KubebernetesAlerts
    - NodeProcesses
    - NodeExporters
    - DockerContainers
    - Etcd
    - NginxIngressAlerts
    - CoreDnsAlerts
    - DRAlerts
    - BackupAlerts

pushgateway:
  install: false
  replicas: 1
  paused: false
  extraArgs: []
  #volumes: {}
  #volumeMounts: {}
  port: 9091
  serviceMonitor:
    install: true
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings: []
    relabelings: []
  ingress: {
    install: "true",
    host: "pushgateway.testdomain.local"
  }
  #nodeSelector: {}
  #affinity: {}
  #resources: {}
  #securityContext: {}
  #tolerations: []
  #annotations: {}
  #labels: {}
integrationTests:
  name: monitoring-tests
  install: true
  #resources: {}
  #securityContext: {}
  #labels: {}
  #annotations: {}
  #tolerations: []
  #nodeSelector: {}
  #affinity: {}
  tags: grafanaORtest-appORprometheus-adapterORsmoke
  timeoutBeforeStart: 120
  statusWriting:
    enabled: true
    isShortStatusMessage: true
    onlyIntegrationTests: true
    customResourcePath: "monitoring.qubership.org/v1alpha1/prometheus-operator/platformmonitorings/platformmonitoring"
commonDashboards:
  install: true
prometheusAdapter:
  install: false
promxy:
  install: false
graphite_remote_adapter:
  install: true
blackboxExporter:
  install: false
# Exporter to request JSON from any URL, parse the response and expose it as metrics
jsonExporter:
  install: true
  config: >
    modules:
      tsdbstatus:
        metrics:
          - name: "tsdb_series_count_by_metric"
            type: object
            help: "General vmsingle tsdb status of the series count by metric name"
            path: '{.data.seriesCountByMetricName[*]}'
            labels:
              name: '{.name}'
            values:
              value: '{.value}'
          - name: "tsdb_series_count_by_label"
            type: object
            help: "General vmsingle tsdb status of the series count by label name"
            path: '{.data.seriesCountByLabelName[*]}'
            labels:
              name: '{.name}'
            values:
              value: '{.value}'
          - name: "tsdb_series_count_by_label_value_pair"
            type: object
            help: "General vmsingle tsdb status of the series count by label value pair"
            path: '{.data.seriesCountByLabelValuePair[*]}'
            labels:
              name: '{.name}'
            values:
              value: '{.value}'
          - name: "tsdb_label_value_count_by_label_name"
            type: object
            help: "General vmsingle tsdb status of the label value count by label name"
            path: '{.data.labelValueCountByLabelName[*]}'
            labels:
              name: '{.name}'
            values:
              value: '{.value}'
networkLatencyExporter:
  install: true
versionExporter:
  install: true
cloudEventsExporter:
  install: true
cloudwatchExporter:
  install: false
promitorAgentScraper:
  install: false
promitorAgentResourceDiscovery:
  install: false
stackdriver_exporter:
  install: false
