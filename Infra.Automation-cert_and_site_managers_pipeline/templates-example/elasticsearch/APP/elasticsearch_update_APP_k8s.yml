JENKINS_URL: ''
JOB_NAME: ''
PROJECT: qa_kubernetes-elasticsearch-cluster
OPENSHIFT_CREDENTIALS: 77795f9d-c2c0-4d8d-83b4-83f4711343ac
ARTIFACT_DESCRIPTOR_VERSION: elasticsearch-service:v.6.8.15-6.12_elasticsearch-service-operator_charts-20211209.185350-3-RELEASE
# Use DESCRIPTOR_NAME to set version as script argument
DESCRIPTOR_NAME: ARTIFACT_DESCRIPTOR_VERSION
|
  name=elasticsearch;
  serviceAccount.create=true;
  serviceAccount.name=elasticsearch-service-operator;
  enablePersistentVolumeCreation=true;
  elasticsearch.install=true;
  elasticsearch.affinity='{"podAntiAffinity": {"requiredDuringSchedulingIgnoredDuringExecution": [{ "labelSelector": {"matchExpressions": [{"key": "component", "operator": "In", "values": ["elasticsearch"]}]},"topologyKey": "kubernetes.io/hostname"}]}}';
  elasticsearch.installationMode=joint;
  elasticsearch.nodesCount=3;
  elasticsearch.storage.size=5Gi;
  elasticsearch.storage.nodes='["worker1","worker2","worker3"]';
  elasticsearch.storage.volumes='["elasticsearch-1","elasticsearch-2","elasticsearch-3"]';
  elasticsearch.snapshotStorage.persistentVolumeType=predefined;
  elasticsearch.snapshotStorage.repositoryName=snapshots;
  elasticsearch.snapshotStorage.persistentVolumeName=pv-nfs-elasticsearch-backup-1;
  elasticsearch.snapshotStorage.volumeSize=5Gi;
  elasticsearch.snapshotStorage.persistentVolumeClaimName=pv-es-snapshots;
  elasticsearch.sequenceStart=0;
  elasticsearch.heapSize=512;
  elasticsearch.resources.requests.cpu=200m;
  elasticsearch.resources.requests.memory=680Mi;
  elasticsearch.resources.limits.cpu=400m;
  elasticsearch.resources.limits.memory=1500Mi;
  elasticsearch.initialReadinessProbeCount=10;
  elasticsearch.livenessProbeInitialDelay=60;
  elasticsearch.readinessProbeInitialDelay=40;
  elasticsearch.tlsHttpEnabled=false;
  elasticsearch.tlsTransportEnabled=false;
  elasticsearch.securityContext='{ "fsGroup": 100, "runAsUser": 100 }';
  elasticsearch.securityConfigurationUsers='[ {"username" : "admin", "password": "admin" } ]';
  elasticsearch.allowPrivileged=false;
  dbaasAdapter.install=true;
  dbaasAdapter.affinity='{"podAffinity": {"preferredDuringSchedulingIgnoredDuringExecution": [{"podAffinityTerm": {"labelSelector": {"matchExpressions": [{"key": "component","operator": "In","values": ["elasticsearch"]}]},"topologyKey": "kubernetes.io/hostname"},"weight": 100}]},"podAntiAffinity": {"requiredDuringSchedulingIgnoredDuringExecution": [{"labelSelector": {"matchExpressions": [{"key": "component","operator": "In","values": ["dbaas-elasticsearch-adapter"]}]},"topologyKey": "kubernetes.io/hostname"}]}}';
  dbaasAdapter.dbaasAdapterAddress=http://dbaas.elasticsearch-service:8080;
  dbaasAdapter.dbaasAggregatorRegistrationAddress=http://dbaas-aggregator.dbaas:8080;
  dbaasAdapter.dbaasAggregatorPhysicalDatabaseIdentifier=elasticsearch-service;
  dbaasAdapter.elasticsearchHost=elasticsearch;
  dbaasAdapter.elasticsearchPort=9200;
  dbaasAdapter.elasticsearchProtocol=http;
  dbaasAdapter.elasticsearchNodesCount=3;
  dbaasAdapter.elasticsearchInstallationMode=joint;
  dbaasAdapter.elasticsearchRepoRoot=/usr/share/elasticsearch/snapshots;
  dbaasAdapter.elasticsearchRepo=snapshots;
  dbaasAdapter.resources.requests.memory=32Mi;
  dbaasAdapter.resources.requests.cpu=150m;
  dbaasAdapter.resources.limits.memory=32Mi;
  dbaasAdapter.resources.limits.cpu=200m;
  dbaasAdapter.dbaasUsername=user;
  dbaasAdapter.dbaasPassword=pass;
  dbaasAdapter.elasticsearchUsername=admin;
  dbaasAdapter.elasticsearchPassword=admin;
  dbaasAdapter.securityContext='{"fsGroup":100,"runAsUser":100}';
  monitoring.install=true;
  monitoring.affinity='{"podAffinity": {"preferredDuringSchedulingIgnoredDuringExecution": [{"podAffinityTerm": {"labelSelector": {"matchExpressions": [{"key": "component","operator": "In","values": ["elasticsearch"]}]},"topologyKey": "kubernetes.io/hostname"},"weight": 100}]}}';
  monitoring.monitoringType=prometheus;
  monitoring.installDashboard=true;
  monitoring.elasticsearchHost=elasticsearch;
  monitoring.elasticsearchPort=9200;
  monitoring.elasticsearchNodesCount=3;
  monitoring.elasticsearchDataNodesCount=3;
  monitoring.elasticsearchExecPluginTimeout=15s;
  monitoring.elasticsearchDbaasAdapterHost=dbaas-elasticsearch-adapter;
  monitoring.elasticsearchDbaasAdapterPort=8080;
  monitoring.smDbHost=http://***.***.***.***:8086;
  monitoring.smDbName=cloud_example_openshift_sdntest_example_com;
  monitoring.resources.requests.memory=128Mi;
  monitoring.resources.requests.cpu=100m;
  monitoring.resources.limits.memory=256Mi;
  monitoring.resources.limits.cpu=200m;
  monitoring.securityContext='{ "runAsUser": 100 }';
  monitoring.smDbUsername=admin;
  monitoring.smDbPassword=admin;
  monitoring.esCredForInternalClients=admin:admin;
  curator.install=true;
  curator.affinity='{"podAffinity": {"preferredDuringSchedulingIgnoredDuringExecution": [{"podAffinityTerm": {"labelSelector": {"matchExpressions": [{"key": "component","operator": "In","values": ["elasticsearch"]}]},"topologyKey": "kubernetes.io/hostname"},"weight": 100}]}}';
  curator.elasticsearchHost=elasticsearch:9200;
  curator.tlsHttpEnabled=false;
  curator.username=admin;
  curator.password=admin;
  curator.backupSchedule=0 0 * * *;
  curator.backupStorage.volumeSize=5Gi;
  curator.backupStorage.persistentVolumeClaimName=pv-es-snapshots;
  curator.backupStorage.persistentVolumeName=pv-nfs-elasticsearch-backup-1;
  curator.backupStorage.persistentVolumeType=storage_class;
  curator.securityContext='{ "fsGroup": 100, "runAsUser": 100 }';
  vaultSecretManagement.enabled=false;
  vaultSecretManagement.url=http://vault-service.vault:8200;
  vaultSecretManagement.method=kubernetes;
  vaultSecretManagement.role=kubernetes-operator-role;
  vaultSecretManagement.path=secret;
  vaultSecretManagement.writePolicies=true;
  vaultSecretManagement.passwordGenerationMechanism=operator;
  vaultSecretManagement.refreshCredentials=false;
  integrationTests.service.name=elasticsearch-integration-tests-runner;
  integrationTests.waitForResult=true;
  integrationTests.timeout=1200;
  integrationTests.secret.elasticsearch.username=admin;
  integrationTests.secret.elasticsearch.password=admin;
  integrationTests.secret.dbaasAdapter.username=user;
  integrationTests.secret.dbaasAdapter.password=pass;
  integrationTests.secret.token=eyJhbGciOiJSUzI1NiIsImtpZCI6Ik9lZmZvVG5LUEFDdDFkdHJFUWxpSFJyWE1ud0J4UkV5S0ZGNC1Tby1yWTAifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJzdXBlcmFkbWluLXRva2VuLWM1ZmJsIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InN1cGVyYWRtaW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJkMWU1OGYyZC03YjRiLTQ4MGMtODI3My0wNzlhMTMyOTYyY2IiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06c3VwZXJhZG1pbiJ9.XD5l9U-WHBeX6rE53m4V4GCCkfV0fKziitTvJBWVK_zEOI6jkmX8uArId49XnQlNLEjQsmnZMmwG2skVNtYDYTXXuxgFy6PcH3J7na_nay_CyHrabl5B-gCoj_QQAHSTHzlZZiftYJe8EWvizQrfITcSaUKyRSOHjOF-mDL3oDcIp4bBj_RuANUQ9Kr1eUijCjXFay5jNhngqMNm3yKU6TtAjljWZ1SRAxAv3XyhLvLikJj_eHZfWJ8cyPPhdzyHOaozX6fcrla1ya86FpA4Q7Bz2PsM30lkWwIlKYAPDEAdt3AgNOsUaPSA1crRUVH0gHh5kCtwqeGtJM9yMC0N8A;
  integrationTests.secret.zabbix.user=Admin;
  integrationTests.secret.zabbix.password=zabbix;
  integrationTests.install=true;
  integrationTests.image=main_latest;
  integrationTests.tags=smoke;
  integrationTests.url=https://dashboard.qa-kubernetes.openshift.sdntest.qubership.org:6443;
  integrationTests.elasticsearchIsManagedByOperator=true;
  integrationTests.drActiveSide=;
  integrationTests.elasticsearchHost=elasticsearch;
  integrationTests.elasticsearchHttpPort=9200;
  integrationTests.elasticsearchCuratorHost=elasticsearch-curator;
  integrationTests.elasticsearchCuratorPort=8080;
  integrationTests.tlsHttpEnabled=false;
  integrationTests.sequenceStartWith=0;
  integrationTests.curatorDeploymentConfig=elasticsearch-curator;
  integrationTests.indicesCleanerConfigurationKey=patterns_to_delete;
  integrationTests.resources.requests.memory=256Mi;
  integrationTests.resources.requests.cpu=200m;
  integrationTests.resources.limits.memory=256Mi;
  integrationTests.resources.limits.cpu=400m;
  integrationTests.securityContext='{ "fsGroup": 100, "runAsUser": 100 }';