|
  webserverSecretKey=''
  fernetKey=''
  ingress='
  enabled: true
  web:
    hosts:
      - web.fenrir-k8s.openshift.sdntest.qubership.org
  ';
  customPreinstallJob='
  enabled: true
  resources: {}
  env: []
  serviceAccount:
    create: false
  role:
    create: false
  command: null
  args:
    - python
    - /bin/createdb.py
  extraSecrets:
    postgres-conn:
      stringData: |
        POSTGRES_HOST: {{ .Values.data.metadataConnection.host }}
        POSTGRES_PORT: "{{ .Values.data.metadataConnection.port }}"
        DB_NAME: {{ .Values.data.metadataConnection.db }}
        DB_USER: {{ .Values.data.metadataConnection.user }}
        POSTGRES_PASSWORD: {{ .Values.data.metadataConnection.pass }}
        POSTGRES_ADMIN_USER: postgres
        POSTGRES_ADMIN_PASSWORD: ''
  extraEnvFrom: |
    - secretRef:
        name: 'postgres-conn'
  ';
  data='
  metadataSecretName: null
  brokerUrlSecretName: null
  metadataConnection:
    user: airflowdb
    pass: ''
    host: pg-patroni.postgres.svc
    port: "5432"
    db: airflowrclone2
    sslmode: disable
    protocol: postgresql
  brokerUrl: redis://default:airflow@airflow.redis.svc:6379/2
  ';
  workers='
  replicas: 1
  resources:
    limits:
      cpu: 3000m
      memory: 3Gi
    requests:
      cpu: 3000m
      memory: 3Gi
  extraVolumes:
    - name: rclone-config
      secret:
        secretName: rclone-config
  ';
  scheduler='
  replicas: 1
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 2000m
      memory: 2Gi
  extraVolumes:
    - name: rclone-config
      secret:
        secretName: rclone-config
  ';
  webserver='
  replicas: 1
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 1000m
      memory: 1Gi
  defaultUser:
    enabled: true
    role: Admin
    username: admin
    email: admin@example.com
    firstName: admin
    lastName: user
    password: ''
  ';
  platformAirflowMonitoring=true;
  serviceMonitor='
  enabled: true
  selector:
    app.kubernetes.io/component: monitoring
  path: /admin/metrics
  interval: 30s
  ';
  prometheusRule='
  enabled: true
  kubeAlerts: true
  additionalLabels:
    app.kubernetes.io/component: monitoring
  groups: []
  ';
  enableBuiltInSecretEnvVars='
  AIRFLOW__CORE__FERNET_KEY: true
  AIRFLOW__CORE__SQL_ALCHEMY_CONN: true
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: true
  AIRFLOW_CONN_AIRFLOW_DB: true
  AIRFLOW__WEBSERVER__SECRET_KEY: true
  AIRFLOW__CELERY__CELERY_RESULT_BACKEND: true
  AIRFLOW__CELERY__RESULT_BACKEND: true
  AIRFLOW__CELERY__BROKER_URL: true
  AIRFLOW__ELASTICSEARCH__HOST: true
  AIRFLOW__ELASTICSEARCH__ELASTICSEARCH_HOST: true
  ';
  extraSecrets='
  dbaas-connection-params-main: null
  rclone-config:
    stringData: |
      rclone.conf: '{{.Values.rcloneConfig}}'
  ';
  config='
  core:
    dags_folder: /opt/airflow/dags
  secrets:
    backend: null
  api:
    auth_backend: airflow.api.auth.backend.basic_auth
  ';
  extraEnvFrom='
  null
  ';
  dags='
  gitSync:
    enabled: true
    rcloneImage: true
    rev: airflowdags
    securityContexts:
      container:
        capabilities:
          drop:
            - ALL
        allowPrivilegeEscalation: false
    extraVolumeMounts:
      - name: rclone-config
        mountPath: /config/rclone/rclone.conf
        readOnly: true
        subPath: rclone.conf
  ';
  rcloneConfig=[remotesrc]

  type = s3

  provider = Minio

  env_auth = false

  access_key_id = ''

  secret_access_key = ''

  region = eu-central-1

  endpoint = http://minio.qa-kubernetes.openshift.sdntest.qubership.org:80

  location_constraint =

  server_side_encryption =;
  ESCAPE_SEQUENCE=true;
  integrationTests='
    enabled: true
    tags: "smokeNOTpg_connection_dag"
  ';
  platformAirflowMonitoring=true;
  serviceMonitor='
    enabled: true
  ';
  prometheusRule='
    enabled: true
  ';
  statsd='
    enabled: true
  ';
  serviceMonitorStatsd='
    enabled: true
  ';