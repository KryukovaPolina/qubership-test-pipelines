|
  webserverSecretKey=''
  fernetKey=''
  ingress='
  enabled: true
  web:
    hosts:
      - web2.fenrir-k8s.openshift.sdntest.qubership.org
  ';
  customPreinstallJob='
  enabled: true
  resources: {}
  env: []
  serviceAccount:
    create: false
  role:
    create: false
  command: null
  args:
    - python
    - /bin/createdb.py
  extraSecrets:
    postgres-conn:
      stringData: |
        POSTGRES_HOST: {{ .Values.data.metadataConnection.host }}
        POSTGRES_PORT: "{{ .Values.data.metadataConnection.port }}"
        DB_NAME: {{ .Values.data.metadataConnection.db }}
        DB_USER: {{ .Values.data.metadataConnection.user }}
        POSTGRES_PASSWORD: {{ .Values.data.metadataConnection.pass }}
        POSTGRES_ADMIN_USER: postgres
        POSTGRES_ADMIN_PASSWORD: ''
  extraEnvFrom: |
    - secretRef:
        name: 'postgres-conn'
  ';
  data='
  metadataSecretName: ~
  brokerUrlSecretName: ~   
  metadataConnection:
    user: airflowdb
    pass: ''
    host: pg-patroni.postgres.svc
    port: "5432"
    db: airflow5
    sslmode: disable
    protocol: postgresql
  brokerUrl: redis://default:airflow@airflow2.redis.svc:6379/2
  ';
  ESCAPE_SEQUENCE=true;
  images='
  airflow:
    pullPolicy: Always
  flower:
    pullPolicy: Always
  ';
  platformAirflowMonitoring=true;
  serviceMonitor='
  enabled: true
  selector:
    app.kubernetes.io/component: monitoring
  path: /admin/metrics
  interval: 30s
  ';
  statsd='
  enabled: true
  ';
  serviceMonitorStatsd='
  enabled: true
  ';
  prometheusRule='
  enabled: true
  kubeAlerts: true
  additionalLabels:
    app.kubernetes.io/component: monitoring
  groups:
    - name: general.rules
      rules:
        - alert: Scheduler CPU load
          annotations:
            description: Scheduler CPU load is over 35%
            summary: Scheduler has CPU load over 35%
          expr: max(rate(container_cpu_usage_seconds_total{namespace="airflow",pod=~".*-scheduler-.*"}[1m]))
            /
            max(kube_pod_container_resource_limits_cpu_cores{exported_namespace="airflow",exported_pod=~".*-scheduler-.*"})
            > 0.35
          for: 1m
          labels:
            severity: major
        - alert: Scheduler CPU load
          annotations:
            description: Scheduler CPU load is over 55%
            summary: Scheduler has CPU load over 55%
          expr: max(rate(container_cpu_usage_seconds_total{namespace="airflow",pod=~".*-scheduler-.*"}[1m]))
            /
            max(kube_pod_container_resource_limits_cpu_cores{exported_namespace="airflow",exported_pod=~".*-scheduler-.*"})
            > 0.55
          for: 1m
          labels:
            severity: major
        - alert: Scheduler CPU load
          annotations:
            description: Scheduler CPU load is over 75%
            summary: Scheduler has CPU load over 75%
          expr: max(rate(container_cpu_usage_seconds_total{namespace="airflow",pod=~".*-scheduler-.*"}[1m]))
            /
            max(kube_pod_container_resource_limits_cpu_cores{exported_namespace="airflow",exported_pod=~".*-scheduler-.*"})
            > 0.75
          for: 1m
          labels:
            severity: major
  ';
  flower='
  enabled: false
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 800Mi
    requests:
      cpu: 300m
      memory: 400Mi
  ';
  scheduler='
  replicas: 1
  resources:
    limits:
      cpu: 1500m
      memory: 1.5Gi
    requests:
      cpu: 800m
      memory: 1Gi
  ';
  webserver='
  replicas: 1
  resources:
    requests:
      cpu: 1000m
      memory: 1Gi
  defaultUser:
    enabled: true
    role: Admin
    username: ldap_test1
  webserverConfig: |
    import os
    from airflow import configuration as conf
    from flask_appbuilder.security.manager import AUTH_LDAP
    basedir = os.path.abspath(os.path.dirname(__file__))
    SQLALCHEMY_DATABASE_URI = conf.get('core', 'SQL_ALCHEMY_CONN')
    CSRF_ENABLED = True
    AUTH_TYPE = AUTH_LDAP
    AUTH_ROLE_ADMIN = 'Admin'
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = 'Viewer'
    AUTH_LDAP_SERVER = 'ldap://openldap.qubership.org:21389'
    AUTH_LDAP_SEARCH = 'ou=users,ou=mano,dc=cloud,dc=com'
    AUTH_LDAP_BIND_USER = 'cn=Manager,dc=cloud,dc=com'
    AUTH_LDAP_BIND_PASSWORD: ''
    AUTH_LDAP_UID_FIELD = 'cn'
    # LDAPS
    AUTH_LDAP_USE_TLS = False
  ';
  workers='
  replicas: 1
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1500m
      memory: 1.5Gi
  terminationGracePeriodSeconds: 60
  command: null
  persistence:
    enabled: true
    size: 5Gi
    storageClassName: local-path
  kerberosSidecar:
    enabled: false
  ';
  airflowLocalSettings={{ .Files.Get "nc_files/nc_platform_logging_config.py" }};
  config='
  core:
    security: kerberos
  webserver:
    expose_config: "True"
  api:
    auth_backend: airflow.api.auth.backend.basic_auth
  logging:
    nc_logging_type: stdoutfilesystem
    remote_logging: '{{- ternary "True" "False" .Values.elasticsearch.enabled }}'
    colored_console_log: "False"
    task_log_reader: task
    audit_log_level: INFO
    logging_config_class: airflow_local_settings.NC_DEFAULT_LOGGING_CONFIG
    task_log_prefix_template: "[DAG_ID]:'{{ \"{{ ti.dag_id }}\" }}' [TASK_ID]:'{{
      \"{{ ti.task_id }}\" }}' [TIMESTAMP]:'{{ \"{{ ts }}\" }}' [TRY_NUMBER]:'{{
      \"{{ ti.try_number }}\" }}'"
  ';
  enableBuiltInSecretEnvVars='
  AIRFLOW__CORE__FERNET_KEY: true
  AIRFLOW__CORE__SQL_ALCHEMY_CONN: true
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: true
  AIRFLOW_CONN_AIRFLOW_DB: true
  AIRFLOW__WEBSERVER__SECRET_KEY: true
  AIRFLOW__CELERY__CELERY_RESULT_BACKEND: true
  AIRFLOW__CELERY__RESULT_BACKEND: true
  AIRFLOW__CELERY__BROKER_URL: true
  AIRFLOW__ELASTICSEARCH__HOST: true
  AIRFLOW__ELASTICSEARCH__ELASTICSEARCH_HOST: true
  ';
  ESCAPE_SEQUENCE=true;
