variables:
  ALPINE_IMAGE: pipe_image_latest
  HELM: /builds/PROD.Platform.HA/Infra.Automation/binary/helm
  KUBECTL: /builds/PROD.Platform.HA/Infra.Automation/binary/kubectl
  CCI_USER: ${CCI_CLIET_ID}
  CCI_PASSWORD: ${CCI_SECRET}
  KUBECONFIG: $PLATCERT01_KUBECONFIG
  #KUBECONFIG: $QA_FULLHA_KUBECONFIG
  CCI_INTEGRATION: "true"
  # Value should be in format: Infra <Release_number> Sprint <Sprint_number>. Examples: Infra 2023.4 Sprint 1 | Infra 2023.1 Sprint 4 | https://cci.qubership.org/project/project-view/2
  RELEASE: "Infra 2024.3 Sprint 4 LTS"

stages:
  - get_versions_from_cci
  - monitoring_helm_deploy
  - monitoring_at
  - cert_manager_helm_deploy
  - cert_manager_at
  - site_manager_postgres_opensearch_zookeeper_helm_deploy
  - site_manager_postgres_opensearch_zookeeper_at
  - rabbit_logging_kafka_helm_deploy
  - rabbit_logging_kafka_at
  - mongo_clickhouse_mistral_redis_helm_deploy
  - mongo_clickhouse_mistral_redis_at
  - streaming_spark_consul_cassandra_helm_deploy
  - streaming_spark_consul_cassandra_at
  - airflow_arango_vault_jaeger_helm_deploy
  - airflow_arango_vault_jaeger_at
  - greenplum_hue_hive_metastore_trino_helm_deploy
  - greenplum_hue_hive_metastore_trino_at
  - volcano_profiler_db_checker_helm_deploy
  - volcano_profiler_db_checker_at


default:
  before_script:
    - pip config set global.index-url qubership.org/api/pypi/pypi_python_org.pypi.proxy/simple
    - pip config set global.trusted-host dockerhub.qubership.org
    - python3 -m pip install --upgrade pip
    - pip install --no-cache-dir -r requirements.txt
    - apk add curl
    - chmod +x $HELM
    - chmod +x $KUBECTL
    - echo "$KUBECONFIG" > kubeconfig.env
    - export KUBECONFIG=/builds/PROD.Platform.HA/Infra.Automation/kubeconfig.env
    - chmod +x ./custom_scripts/template.sh
    - chmod +x ./custom_scripts/check_pods.sh

.test-case: &test-case
  image: ${ALPINE_IMAGE}
  tags:
    - ''
  allow_failure: true
  when: manual

include:
  - local: 'apps_configuration/applications.yml'
  - local: 'apps_configuration/maven_coordinates.yml'

CCI Integration:
  <<: *test-case
  stage: get_versions_from_cci
  script:
    - python3 custom_scripts/cci_integration.py --release="${RELEASE}" --user="${CCI_USER}" --password="${CCI_PASSWORD}";
    - cat .env
    - $HELM version
  artifacts:
    paths:
      - .env
  only: { variables: [ $CCI_INTEGRATION == "true" ] }

Helm Deploy PostgreSQL:
  <<: *test-case
  stage: site_manager_postgres_opensearch_zookeeper_helm_deploy
  script:
    - $HELM list -n $Postgres_ns
    - $KUBECTL delete ns $Postgres_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for PostgreSQL Core from CCI ...;
        source .env;
        VERSION=${postgres:-$Postgres_version}
      else
        echo CCI integration is disabled, start to get version for PostgreSQL from applications.yml file...;
        VERSION=$Postgres_version;
      fi
    - echo FINAL PostgreSQL version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Postgres_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Postgres_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-postgres.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-postgres.yml"
    - cat quickstart-samples/quickstart-sample-postgres.yml
    - zip_url=$(curl $Postgres_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Postgres_maven_coordinates/$VERSION/$zip_url
    - mkdir postgres-chart
    - unzip repo-archive.zip -d postgres-chart
    - echo Postgres Core chart downloaded and unzipped.
    - cd postgres-chart/*postgres
    - cat ../../quickstart-samples/quickstart-sample-postgres.yml >> patroni-core/charts/patroni-core/postgres-operator-quickstart-sample.yaml
    - ls -l patroni-core/charts/patroni-core/
    - |
      if $KUBECTL create -f ./patroni-core/charts/patroni-core/crds; then
        echo "PostgreSQL CRD created successfully."
      else
        $KUBECTL replace -f ./patroni-core/charts/patroni-core/crds;
        echo "PostgreSQL CRD replaced successfully."
      fi
    - $HELM install --namespace=$Postgres_ns --create-namespace -f ./patroni-core/charts/patroni-core/postgres-operator-quickstart-sample.yaml postgres-core ./patroni-core/charts/patroni-core
    - sleep 1m
    - cd ../../
    - echo Postgres Core chart is installed, start work with Postgres Services...
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Postgres Services from CCI ...;
        source .env;
        VERSION=${postgres_services:-$Postgres_services_version}
      else
        echo CCI integration is disabled, start to get version for Postgres Services from applications.yml file...;
        VERSION=$Postgres_services_version;
      fi
    - echo FINAL PostgreSQL Services version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Postgres_services_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Postgres_services_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-postgres.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-postgres.yml"
    - cat quickstart-samples/quickstart-sample-postgres.yml
    - zip_url=$(curl $Postgres_services_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Postgres_services_maven_coordinates/$VERSION/$zip_url
    - mkdir postgres-services-chart
    - unzip repo-archive.zip -d postgres-services-chart
    - echo Postgres Services chart downloaded and unzipped.
    - cd postgres-services-chart/*postgres-services
    - cat ../../quickstart-samples/quickstart-sample-postgres.yml >> patroni-services/charts/patroni-services/postgres-operator-quickstart-sample.yaml
    - ls -l patroni-services/charts/patroni-services/
    - |
      if $KUBECTL create -f ./patroni-services/charts/patroni-services/crds; then
        echo "Postgres Services CRD created successfully."
      else
        $KUBECTL replace -f ./patroni-services/charts/patroni-services/crds;
        echo "Postgres Servies CRD replaced successfully."
      fi
    - $HELM install --namespace=$Postgres_ns --create-namespace -f ./patroni-services/charts/patroni-services/postgres-operator-quickstart-sample.yaml postgres-services ./patroni-services/charts/patroni-services
  only: { variables: [ $Postgres_install == "true" ] }

Check PostgreSQL Integration Tests:
  <<: *test-case
  stage: site_manager_postgres_opensearch_zookeeper_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Postgres_ns}" --timeout="200" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Postgres_ns}"
  only: { variables: [ $Postgres_install == "true" ] }

Helm Deploy Opensearch:
  <<: *test-case
  stage: site_manager_postgres_opensearch_zookeeper_helm_deploy
  script:
    - $HELM list -n $Opensearch_ns
    - $KUBECTL delete ns $Opensearch_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Opensearch from CCI ...;
        source .env;
        VERSION=${opensearch_service:-$Opensearch_version}
      else
        echo CCI integration is disabled, start to get version for Opensearch from applications.yml file...;
        VERSION=$Opensearch_version;
      fi
    - echo FINAL Opensearch version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Opensearch_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Opensearch_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-opensearch.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-opensearch.yml"
    - cat quickstart-samples/quickstart-sample-opensearch.yml
    - zip_url=$(curl $Opensearch_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Opensearch_maven_coordinates/$VERSION/$zip_url
    - mkdir opensearch-chart
    - unzip repo-archive.zip -d opensearch-chart
    - echo Opensearch chart downloaded and unzipped.
    - cd opensearch-chart/*opensearch-service
    - cat ../../quickstart-samples/quickstart-sample-opensearch.yml >> opensearch-service/charts/opensearch-service/opensearch-operator-quickstart-sample.yaml
    - ls -l opensearch-service/charts/opensearch-service/
    - |
      if $KUBECTL create -f ./opensearch-service/charts/opensearch-service/crds; then
        echo "Opensearch CRD created successfully."
      else
        $KUBECTL replace -f ./opensearch-service/charts/opensearch-service/crds;
        echo "Opensearch CRD replaced successfully."
      fi
    - $HELM install --namespace=$Opensearch_ns --create-namespace -f ./opensearch-service/charts/opensearch-service/opensearch-operator-quickstart-sample.yaml opensearch-service ./opensearch-service/charts/opensearch-service
  only: { variables: [ $Opensearch_install == "true" ] }

Helm Deploy Opensearch For Logging:
  <<: *test-case
  stage: site_manager_postgres_opensearch_zookeeper_helm_deploy
  script:
    - $HELM list -n $Opensearch_for_logging_ns
    - $KUBECTL delete ns $Opensearch_for_logging_ns --ignore-not-found
    - echo Prepearing images...
    - response=$(curl $Opensearch_maven_coordinates/$Opensearch_for_logging_version/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Opensearch_maven_coordinates/$Opensearch_for_logging_version/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-opensearch-cloud.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-opensearch-cloud.yml"
    - cat quickstart-samples/quickstart-sample-opensearch-cloud.yml
    - zip_url=$(curl $Opensearch_maven_coordinates/$Opensearch_for_logging_version/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Opensearch_maven_coordinates/$Opensearch_for_logging_version/$zip_url
    - mkdir opensearch-chart
    - unzip repo-archive.zip -d opensearch-chart
    - echo Opensearch chart downloaded and unzipped.
    - cd opensearch-chart/*opensearch-service
    - cat ../../quickstart-samples/quickstart-sample-opensearch-cloud.yml >> opensearch-service/charts/opensearch-service/opensearch-operator-quickstart-sample.yaml
    - ls -l opensearch-service/charts/opensearch-service/
    - $HELM install --namespace=$Opensearch_for_logging_ns --create-namespace -f ./opensearch-service/charts/opensearch-service/opensearch-operator-quickstart-sample.yaml opensearch-service ./opensearch-service/charts/opensearch-service
  only: { variables: [ $Opensearch_for_logging_install == "true" ] }

Check Opensearch For Logging Integration Tests:
  <<: *test-case
  stage: site_manager_postgres_opensearch_zookeeper_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Opensearch_for_logging_ns}" --timeout="600" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Opensearch_for_logging_ns}"
  only: { variables: [ $Opensearch_for_logging_install == "true" ] }

Check Opensearch Integration Tests:
  <<: *test-case
  stage: site_manager_postgres_opensearch_zookeeper_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Opensearch_ns}" --timeout="600" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Opensearch_ns}"
  only: { variables: [ $Opensearch_install == "true" ] }

Helm Deploy ArangoDB:
  <<: *test-case
  stage: airflow_arango_vault_jaeger_helm_deploy
  script:
    - $HELM list -n $Arango_ns
    - $KUBECTL delete ns $Arango_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for ArangoDB from CCI ...;
        source .env;
        VERSION=${arangodb_operator:-$Arango_version}
      else
        echo CCI integration is disabled, start to get version for ArangoDB from applications.yml file...;
        VERSION=$Arango_version;
      fi
    - echo FINAL ArangoDB version $VERSION;
    - echo Preparing images...
    - response=$(curl $Arango_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Arango_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-arango.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-arango.yml"
    - cat quickstart-samples/quickstart-sample-arango.yml
    - zip_url=$(curl $Arango_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Arango_maven_coordinates/$VERSION/$zip_url
    - mkdir arango-chart
    - unzip repo-archive.zip -d arango-chart
    - echo ArangoDB chart downloaded and unzipped.
    - cd arango-chart/*arangodb-operator
    - cat ../../quickstart-samples/quickstart-sample-arango.yml >> arangodb-operator/charts/arangodb-operator/arango-operator-quickstart-sample.yaml
    - ls -l arangodb-operator/charts/arangodb-operator/
    - |
      if $KUBECTL create -f ./arangodb-operator/charts/arangodb-operator/crds; then
        echo "Arango CRD created successfully."
      else
        $KUBECTL replace -f ./arangodb-operator/charts/arangodb-operator/crds;
        echo "Arango CRD replaced successfully."
      fi
    - $HELM install --namespace=$Arango_ns --create-namespace -f ./arangodb-operator/charts/arangodb-operator/arango-operator-quickstart-sample.yaml arangodb-service ./arangodb-operator/charts/arangodb-operator
  only: { variables: [ $Arango_install == "true" ] }

Check ArangoDB Integration Tests:
  <<: *test-case
  stage: airflow_arango_vault_jaeger_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Arango_ns}" --timeout="300" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Arango_ns}"
  only: { variables: [ $Arango_install == "true" ] }

Helm Deploy Clickhouse:
  <<: *test-case
  stage: mongo_clickhouse_mistral_redis_helm_deploy
  script:
    - $HELM list -n $Clickhouse_ns
    - chmod +x ./custom_scripts/clean_clickhouse_objects.sh
    - ./custom_scripts/clean_clickhouse_objects.sh $Clickhouse_ns
    - $KUBECTL delete ns $Clickhouse_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Clickhouse from CCI ...;
        source .env;
        VERSION=${clickhouse:-$Clickhouse_version}
      else
        echo CCI integration is disabled, start to get version for Clickhouse from applications.yml file...;
        VERSION=$Clickhouse_version;
      fi
    - echo FINAL Clickhouse version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Clickhouse_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Clickhouse_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-clickhouse.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-clickhouse.yml"
    - cat quickstart-samples/quickstart-sample-clickhouse.yml
    - zip_url=$(curl $Clickhouse_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Clickhouse_maven_coordinates/$VERSION/$zip_url
    - mkdir clickhouse-chart
    - unzip repo-archive.zip -d clickhouse-chart
    - echo Clickhouse chart downloaded and unzipped.
    - cd clickhouse-chart/*clickhouse
    - cat ../../quickstart-samples/quickstart-sample-clickhouse.yml >> clickhouse/charts/clickhouse/clickhouse-operator-quickstart-sample.yaml
    - ls -l clickhouse/charts/clickhouse/
    - |
      if $KUBECTL create -f ./clickhouse/charts/clickhouse/crds; then
        echo "Clickhouse CRD created successfully."
      else
        $KUBECTL replace -f ./clickhouse/charts/clickhouse/crds;
        echo "Clickhouse CRD replaced successfully."
      fi
    - $HELM install --namespace=$Clickhouse_ns --create-namespace -f ./clickhouse/charts/clickhouse/clickhouse-operator-quickstart-sample.yaml clickhouse ./clickhouse/charts/clickhouse
    - sleep 1m
    - cd ../../
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Clickhouse services from CCI ...;
        source .env;
        VERSION=${clickhouse_services:-$Clickhouse_services_version}
      else
        echo CCI integration is disabled, start to get version for Clickhouse services from applications.yml file...;
        VERSION=$Clickhouse_services_version;
      fi
    - echo FINAL Clickhouse services version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Clickhouse_services_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Clickhouse_services_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-clickhouse.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-clickhouse.yml"
    - cat quickstart-samples/quickstart-sample-clickhouse.yml
    - zip_url=$(curl $Clickhouse_services_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Clickhouse_services_maven_coordinates/$VERSION/$zip_url
    - mkdir clickhouse-services-chart
    - unzip repo-archive.zip -d clickhouse-services-chart
    - echo Clickhouse services chart downloaded and unzipped.
    - cd clickhouse-services-chart/*clickhouse-services
    - cat ../../quickstart-samples/quickstart-sample-clickhouse.yml >> clickhouse-services/charts/clickhouse-services/clickhouse-operator-quickstart-sample.yaml
    - ls -l clickhouse-services/charts/clickhouse-services/
    - $HELM install --namespace=$Clickhouse_ns --create-namespace -f ./clickhouse-services/charts/clickhouse-services/clickhouse-operator-quickstart-sample.yaml clickhouse-services ./clickhouse-services/charts/clickhouse-services
  only: { variables: [ $Clickhouse_install == "true" ] }

Check Clickhouse Integration Tests:
  <<: *test-case
  stage: mongo_clickhouse_mistral_redis_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Clickhouse_ns}" --timeout="600" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Clickhouse_ns}"
  only: { variables: [ $Clickhouse_install == "true" ] }

Helm Deploy Mistral:
  <<: *test-case
  stage: mongo_clickhouse_mistral_redis_helm_deploy
  script:
    - $HELM list -n $Mistral_ns
    - $KUBECTL delete ns $Mistral_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Mistral from CCI ...;
        source .env;
        VERSION=${mistral:-$Mistral_version}
      else
        echo CCI integration is disabled, start to get version for Mistral from applications.yml file...;
        VERSION=$Mistral_version;
      fi
    - echo FINAL Mistral version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Mistral_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Mistral_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-mistral.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-mistral.yml"
    - cat quickstart-samples/quickstart-sample-mistral.yml
    - zip_url=$(curl $Mistral_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Mistral_maven_coordinates/$VERSION/$zip_url
    - mkdir mistral-chart
    - unzip repo-archive.zip -d mistral-chart
    - echo Mistral chart downloaded and unzipped.
    - cd mistral-chart/*mistral-operator
    - cat ../../quickstart-samples/quickstart-sample-mistral.yml >> mistral-operator/charts/mistral-operator/mistral-operator-quickstart-sample.yaml
    - ls -l mistral-operator/charts/mistral-operator/
    - |
      if $KUBECTL create -f ./mistral-operator/charts/mistral-operator/crds; then
        echo "Mistral CRD created successfully."
      else
        $KUBECTL replace -f ./mistral-operator/charts/mistral-operator/crds;
        echo "Mistral CRD replaced successfully."
      fi
    - $HELM install --namespace=$Mistral_ns --create-namespace -f ./mistral-operator/charts/mistral-operator/mistral-operator-quickstart-sample.yaml mistral-service ./mistral-operator/charts/mistral-operator
  only: { variables: [ $Mistral_install == "true" ] }

Check Mistral Integration Tests:
  <<: *test-case
  stage: mongo_clickhouse_mistral_redis_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Mistral_ns}" --timeout="1500" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Mistral_ns}"
  only: { variables: [ $Mistral_install == "true" ] }

Helm Deploy Rabbit:
  <<: *test-case
  stage: rabbit_logging_kafka_helm_deploy
  script:
    - $HELM list -n $Rabbit_ns
    - $KUBECTL delete ns $Rabbit_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Rabbit from CCI ...;
        source .env;
        VERSION=${rabbitmq:-$Rabbit_version}
      else
        echo CCI integration is disabled, start to get version for Rabbit from applications.yml file...;
        VERSION=$Rabbit_version;
      fi
    - echo FINAL Rabbit version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Rabbit_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Rabbit_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-rabbit.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-rabbit.yml"
    - cat quickstart-samples/quickstart-sample-rabbit.yml
    - zip_url=$(curl $Rabbit_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Rabbit_maven_coordinates/$VERSION/$zip_url
    - mkdir rabbit-chart
    - unzip repo-archive.zip -d rabbit-chart
    - echo Rabbit chart downloaded and unzipped.
    - cd rabbit-chart/*rabbitmq
    - cat ../../quickstart-samples/quickstart-sample-rabbit.yml >> rabbitmq/charts/rabbitmq/rabbit-operator-quickstart-sample.yaml
    - ls -l rabbitmq/charts/rabbitmq/
    - |
      if $KUBECTL create -f ./rabbitmq/charts/rabbitmq/crds; then
        echo "Rabbit CRD created successfully."
      else
        $KUBECTL replace -f ./rabbitmq/charts/rabbitmq/crds;
        echo "Rabbit CRD replaced successfully."
      fi
    - $HELM install --namespace=$Rabbit_ns --create-namespace -f ./rabbitmq/charts/rabbitmq/rabbit-operator-quickstart-sample.yaml rabbit-service ./rabbitmq/charts/rabbitmq
  only: { variables: [ $Rabbit_install == "true" ] }

Check Rabbit Integration Tests:
  <<: *test-case
  stage: rabbit_logging_kafka_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Rabbit_ns}" --timeout="500" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Rabbit_ns}"
  only: { variables: [ $Rabbit_install == "true" ] }

Helm Deploy Vault:
  <<: *test-case
  stage: airflow_arango_vault_jaeger_helm_deploy
  script:
    - $HELM list -n $Vault_ns
    - $KUBECTL delete ns $Vault_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Vault from CCI ...;
        source .env;
        VERSION=${vault_operator:-$Vault_version}
      else
        echo CCI integration is disabled, start to get version for Vault from applications.yml file...;
        VERSION=$Vault_version;
      fi
    - echo FINAL Vault version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Vault_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Vault_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-vault.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-vault.yml"
    - cat quickstart-samples/quickstart-sample-vault.yml
    - zip_url=$(curl $Vault_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Vault_maven_coordinates/$VERSION/$zip_url
    - mkdir vault-chart
    - unzip repo-archive.zip -d vault-chart
    - echo Vault chart downloaded and unzipped.
    - cd vault-chart/*vault-operator
    - cat ../../quickstart-samples/quickstart-sample-vault.yml >> vault-operator/charts/vault-operator/vault-operator-quickstart-sample.yaml
    - ls -l vault-operator/charts/vault-operator/
    - |
      if $KUBECTL create -f ./vault-operator/charts/vault-operator/crds; then
        echo "Vault CRD created successfully."
      else
        $KUBECTL replace -f ./vault-operator/charts/vault-operator/crds;
        echo "Vault CRD replaced successfully."
      fi
    - $HELM install --namespace=$Vault_ns --create-namespace -f ./vault-operator/charts/vault-operator/vault-operator-quickstart-sample.yaml vault-service ./vault-operator/charts/vault-operator
  only: { variables: [ $Vault_install == "true" ] }

Check Vault Integration Tests:
  <<: *test-case
  stage: airflow_arango_vault_jaeger_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Vault_ns}" --timeout="200" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Vault_ns}"
  only: { variables: [ $Vault_install == "true" ] }

Helm Deploy Cassandra:
  <<: *test-case
  stage: streaming_spark_consul_cassandra_helm_deploy
  script:
    - $HELM list -n $Cassandra_ns
    - $KUBECTL delete ns $Cassandra_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Cassandra from CCI ...;
        source .env;
        VERSION=${CASSANDRA:-$Cassandra_version}
      else
        echo CCI integration is disabled, start to get version for Cassandra from applications.yml file...;
        VERSION=$Cassandra_version;
      fi
    - echo FINAL Cassandra version $VERSION;
    - echo Preparing images...
    - response=$(curl $Cassandra_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Cassandra_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-cassandra.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-cassandra.yml"
    - cat quickstart-samples/quickstart-sample-cassandra.yml
    - zip_url=$(curl $Cassandra_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Cassandra_maven_coordinates/$VERSION/$zip_url
    - mkdir cassandra-chart
    - unzip repo-archive.zip -d cassandra-chart
    - $HELM install --namespace=$Cassandra_ns --create-namespace -f ./cassandra-chart/*cassandra-operator/cassandra/charts/cassandra/values.yaml cassandra-service ./cassandra-chart/*cassandra-operator/cassandra/charts/cassandra
    - echo Cassandra helm chart is installed. Start wotk with Cassandra operator chart...
    - cd cassandra-chart/*cassandra-operator
    - cat ../../quickstart-samples/quickstart-sample-cassandra.yml >> cassandra-operator/charts/cassandra-operator/cassandra-operator-quickstart-sample.yaml
    - ls -l cassandra-operator/charts/cassandra-operator/
    - |
      if $KUBECTL create -f ./cassandra-operator/charts/cassandra-operator/crds; then
        echo "Cassandra CRD created successfully."
      else
        $KUBECTL replace -f ./cassandra-operator/charts/cassandra-operator/crds;
        echo "Cassandra CRD replaced successfully."
      fi
    - $HELM install -f ./cassandra-operator/charts/cassandra-operator/cassandra-operator-quickstart-sample.yaml cassandra-operator ./cassandra-operator/charts/cassandra-operator -n $Cassandra_ns
    - sleep 7m
    - cd ../../
    - echo Cassandra operator chart is installed, start work with Cassandra Services...
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Cassandra Services from CCI ...;
        source .env;
        VERSION=${cassandra_services:-$Cassandra_services_version}
      else
        echo CCI integration is disabled, start to get version for Cassandra Services from applications.yml file...;
        VERSION=$Cassandra_services_version;
      fi
    - echo FINAL Cassandra Services version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Cassandra_services_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Cassandra_services_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-cassandra.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-cassandra.yml"
    - cat quickstart-samples/quickstart-sample-cassandra.yml
    - zip_url=$(curl $Cassandra_services_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Cassandra_services_maven_coordinates/$VERSION/$zip_url
    - mkdir cassandra-services-chart
    - unzip repo-archive.zip -d cassandra-services-chart
    - echo Cassandra Services chart downloaded and unzipped.
    - cd cassandra-services-chart/*cassandra-services
    - cat ../../quickstart-samples/quickstart-sample-cassandra.yml >> cassandra-services/charts/cassandra-services/cassandra-operator-quickstart-sample.yaml
    - ls -l cassandra-services/charts/cassandra-services/
    - |
      if $KUBECTL create -f ./cassandra-services/charts/cassandra-services/crds; then
        echo "Cassandra Services CRD created successfully."
      else
        $KUBECTL replace -f ./cassandra-services/charts/cassandra-services/crds;
        echo "Cassandra Servies CRD replaced successfully."
      fi
    - $HELM install --namespace=$Cassandra_ns --create-namespace -f ./cassandra-services/charts/cassandra-services/cassandra-operator-quickstart-sample.yaml cassandra-services ./cassandra-services/charts/cassandra-services
  only: { variables: [ $Cassandra_install == "true" ] }

Check Cassandra Integration Tests:
  <<: *test-case
  stage: streaming_spark_consul_cassandra_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Cassandra_ns}" --timeout="1200" --attempts-for-wait-pod="30"
    - ./custom_scripts/check_pods.sh "${Cassandra_ns}"
  only: { variables: [ $Cassandra_install == "true" ] }

Helm Deploy Streaming:
  <<: *test-case
  stage: streaming_spark_consul_cassandra_helm_deploy
  script:
    - $HELM list -n $Streaming_ns
    - $KUBECTL delete ns $Streaming_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Streaming from CCI ...;
        source .env;
        VERSION=${streaming_service:-$Streaming_version}
      else
        echo CCI integration is disabled, start to get version for Streaming from applications.yml file...;
        VERSION=$Streaming_version;
      fi
    - echo FINAL Streaming version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Streaming_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Streaming_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-streaming.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-streaming.yml"
    - cat quickstart-samples/quickstart-sample-streaming.yml
    - zip_url=$(curl $Streaming_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Streaming_maven_coordinates/$VERSION/$zip_url
    - mkdir streaming-chart
    - unzip repo-archive.zip -d streaming-chart
    - echo Streaming chart downloaded and unzipped.
    - cd streaming-chart/*streaming-service
    - cat ../../quickstart-samples/quickstart-sample-streaming.yml >> streaming-service/charts/streaming-service/streaming-operator-quickstart-sample.yaml
    - ls -l streaming-service/charts/streaming-service/
    - |
      if $KUBECTL create -f ./streaming-service/charts/streaming-service/crds; then
        echo "Streaming CRD created successfully."
      else
        $KUBECTL replace -f ./streaming-service/charts/streaming-service/crds;
        echo "Streaming CRD replaced successfully."
      fi
    - $HELM install --namespace=$Streaming_ns --create-namespace -f ./streaming-service/charts/streaming-service/streaming-operator-quickstart-sample.yaml streaming-service ./streaming-service/charts/streaming-service
  only: { variables: [ $Streaming_install == "true" ] }

Check Streaming Integration Tests:
  <<: *test-case
  stage: streaming_spark_consul_cassandra_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Streaming_ns}" --timeout="300" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Streaming_ns}"
  only: { variables: [ $Streaming_install == "true" ] }

Helm Deploy Zookeeper:
  <<: *test-case
  stage: site_manager_postgres_opensearch_zookeeper_helm_deploy
  script:
    - $HELM list -n $Zookeeper_ns
    - $KUBECTL delete ns $Zookeeper_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Zookeeper from CCI ...;
        source .env;
        VERSION=${zookeeper_service:-$Zookeeper_version}
      else
        echo CCI integration is disabled, start to get version for Zookeeper from applications.yml file...;
        VERSION=$Zookeeper_version;
      fi
    - echo FINAL Zookeeper version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Zookeeper_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Zookeeper_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-zookeeper.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-zookeeper.yml"
    - cat quickstart-samples/quickstart-sample-zookeeper.yml
    - zip_url=$(curl $Zookeeper_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Zookeeper_maven_coordinates/$VERSION/$zip_url
    - mkdir zookeeper-chart
    - unzip repo-archive.zip -d zookeeper-chart
    - echo Zookeeper chart downloaded and unzipped.
    - cd zookeeper-chart/*zookeeper-service
    - cat ../../quickstart-samples/quickstart-sample-zookeeper.yml >> zookeeper-service/charts/zookeeper-service/zookeeper-operator-quickstart-sample.yaml
    - ls -l zookeeper-service/charts/zookeeper-service/
    - |
      if $KUBECTL create -f ./zookeeper-service/charts/zookeeper-service/crds; then
        echo "Zookeeper CRD created successfully."
      else
        $KUBECTL replace -f ./zookeeper-service/charts/zookeeper-service/crds;
        echo "Zookeeper CRD replaced successfully."
      fi
    - $HELM install --namespace=$Zookeeper_ns --create-namespace -f ./zookeeper-service/charts/zookeeper-service/zookeeper-operator-quickstart-sample.yaml zookeeper-service ./zookeeper-service/charts/zookeeper-service
  only: { variables: [ $Zookeeper_install == "true" ] }

Check Zookeeper Integration Tests:
  <<: *test-case
  stage: site_manager_postgres_opensearch_zookeeper_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Zookeeper_ns}" --timeout="200" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Zookeeper_ns}"
  only: { variables: [ $Zookeeper_install == "true" ] }

Helm Deploy Kafka:
  <<: *test-case
  stage: rabbit_logging_kafka_helm_deploy
  script:
    - $HELM list -n $Kafka_ns
    - $KUBECTL delete ns $Kafka_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Kafka from CCI ...;
        source .env;
        VERSION=${kafka:-$Kafka_version}
      else
        echo CCI integration is disabled, start to get version for Kafka from applications.yml file...;
        VERSION=$Kafka_version;
      fi
    - echo FINAL Kafka version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Kafka_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Kafka_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-kafka.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-kafka.yml"
    - cat quickstart-samples/quickstart-sample-kafka.yml
    - zip_url=$(curl $Kafka_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Kafka_maven_coordinates/$VERSION/$zip_url
    - mkdir kafka-chart
    - unzip repo-archive.zip -d kafka-chart
    - echo Kafka chart downloaded and unzipped.
    - cd kafka-chart/*kafka
    - cat ../../quickstart-samples/quickstart-sample-kafka.yml >> kafka/charts/kafka/kafka-operator-quickstart-sample.yaml
    - ls -l kafka/charts/kafka/
    - |
      if $KUBECTL create -f ./kafka/charts/kafka/crds; then
        echo "Kafka CRD created successfully."
      else
        $KUBECTL replace -f ./kafka/charts/kafka/crds;
        echo "Kafka CRD replaced successfully."
      fi
    - $HELM install --namespace=$Kafka_ns --create-namespace -f ./kafka/charts/kafka/kafka-operator-quickstart-sample.yaml kafka-service ./kafka/charts/kafka
    - cd ../../
    - echo Kafka chart is installed, start work with Kafka-services...
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Kafka services from CCI ...;
        source .env;
        VERSION=${kafka_services:-$Kafka_serices_version}
      else
        echo CCI integration is disabled, start to get version for Kafka services from applications.yml file...;
        VERSION=$Kafka_serices_version;
      fi
    - echo FINAL Kafka services version $VERSION;
    - response=$(curl $Kafka_services_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Kafka_services_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-kafka.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-kafka.yml"
    - cat quickstart-samples/quickstart-sample-kafka.yml
    - zip_url=$(curl $Kafka_services_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Kafka_services_maven_coordinates/$VERSION/$zip_url
    - mkdir kafka-services-chart
    - unzip repo-archive.zip -d kafka-services-chart
    - echo Kafka services chart downloaded and unzipped.
    - cd kafka-services-chart/*kafka-services
    - cat ../../quickstart-samples/quickstart-sample-kafka.yml >> kafka-service/charts/kafka-service/kafka-operator-quickstart-sample.yaml
    - ls -l kafka-service/charts/kafka-service/
    - |
      if $KUBECTL create -f ./kafka-service/charts/kafka-service/crds; then
        echo "Kafka services CRDs created successfully."
      else
        $KUBECTL replace -f ./kafka-service/charts/kafka-service/crds;
        echo "Kafka services CRDs replaced successfully."
      fi
    - $HELM install --namespace=$Kafka_ns --create-namespace -f ./kafka-service/charts/kafka-service/kafka-operator-quickstart-sample.yaml kafka-services ./kafka-service/charts/kafka-service
  only: { variables: [ $Kafka_install == "true" ] }

Check Kafka Integration Tests:
  <<: *test-case
  stage: rabbit_logging_kafka_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Kafka_ns}" --timeout="800" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Kafka_ns}"
  only: { variables: [ $Kafka_install == "true" ] }

Helm Deploy Consul:
  <<: *test-case
  stage: streaming_spark_consul_cassandra_helm_deploy
  script:
    - $HELM list -n $Consul_ns
    - $KUBECTL delete ns $Consul_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Consul from CCI ...;
        source .env;
        VERSION=${consul_service:-$Consul_version}
      else
        echo CCI integration is disabled, start to get version for Consul from applications.yml file...;
        VERSION=$Consul_version;
      fi
    - echo FINAL Consul version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Consul_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Consul_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-consul.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-consul.yml"
    - cat quickstart-samples/quickstart-sample-consul.yml
    - zip_url=$(curl $Consul_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Consul_maven_coordinates/$VERSION/$zip_url
    - mkdir consul-chart
    - unzip repo-archive.zip -d consul-chart
    - echo Consul chart downloaded and unzipped.
    - cd consul-chart/*consul-service
    - cat ../../quickstart-samples/quickstart-sample-consul.yml >> consul-service/charts/consul-service/consul-operator-quickstart-sample.yaml
    - ls -l consul-service/charts/consul-service/
    - |
      if $KUBECTL create -f ./consul-service/charts/consul-service/crds; then
        echo "Consul CRD created successfully."
      else
        $KUBECTL replace -f ./consul-service/charts/consul-service/crds;
        echo "Consul CRD replaced successfully."
      fi
    - $KUBECTL create ns $Consul_ns
    - $KUBECTL label namespaces $Consul_ns pod-security.kubernetes.io/enforce=privileged --overwrite=true
    - $HELM install --namespace=$Consul_ns --create-namespace -f ./consul-service/charts/consul-service/consul-operator-quickstart-sample.yaml consul-service ./consul-service/charts/consul-service
  only: { variables: [ $Consul_install == "true" ] }

Check Consul Integration Tests:
  <<: *test-case
  stage: streaming_spark_consul_cassandra_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Consul_ns}" --timeout="300" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Consul_ns}"
  only: { variables: [ $Consul_install == "true" ] }

Helm Deploy Monitoring:
  <<: *test-case
  stage: monitoring_helm_deploy
  script:
    - $HELM list -n $Monitoring_ns
    - $KUBECTL delete ns $Monitoring_ns --ignore-not-found --wait=false
    - sleep 1m
    - chmod +x ./custom_scripts/clean_vm_objects.sh
    - ./custom_scripts/clean_vm_objects.sh $Monitoring_ns
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Monitoring from CCI ...;
        source .env;
        VERSION=${MONITORING:-$Monitoring_version}
      else
        echo CCI integration is disabled, start to get version for Monitoring from applications.yml file...;
        VERSION=$Monitoring_version;
      fi
    - echo FINAL Monitoring version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Monitoring_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Monitoring_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-monitoring.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-monitoring.yml"
    - cat quickstart-samples/quickstart-sample-monitoring.yml
    - zip_url=$(curl $Monitoring_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Monitoring_maven_coordinates/$VERSION/$zip_url
    - mkdir monitoring-chart
    - unzip repo-archive.zip -d monitoring-chart
    - echo Monitoring chart downloaded and unzipped.
    - cd monitoring-chart/*monitoring-operator
    - cat ../../quickstart-samples/quickstart-sample-monitoring.yml >> monitoring-operator/charts/monitoring-operator/monitoring-operator-quickstart-sample.yaml
    - ls -l monitoring-operator/charts/monitoring-operator/
    - |
      if $KUBECTL create -f ./monitoring-operator/charts/monitoring-operator/crds; then
        $KUBECTL create -f ./monitoring-operator/charts/monitoring-operator/charts/grafana-operator/crds;
        $KUBECTL create -f ./monitoring-operator/charts/monitoring-operator/charts/prometheus-adapter-operator/crds;
        $KUBECTL create -f ./monitoring-operator/charts/monitoring-operator/charts/prometheus-operator/crds;
        $KUBECTL create -f ./monitoring-operator/charts/monitoring-operator/charts/victoriametrics-operator/crds;
        echo "Monitoring CRD created successfully."
      else
        $KUBECTL replace -f ./monitoring-operator/charts/monitoring-operator/crds;
        $KUBECTL replace -f ./monitoring-operator/charts/monitoring-operator/charts/grafana-operator/crds;
        $KUBECTL replace -f ./monitoring-operator/charts/monitoring-operator/charts/prometheus-adapter-operator/crds;
        $KUBECTL replace -f ./monitoring-operator/charts/monitoring-operator/charts/prometheus-operator/crds;
        $KUBECTL replace -f ./monitoring-operator/charts/monitoring-operator/charts/victoriametrics-operator/crds;
        echo "Monitoring CRD replaced successfully."
      fi
    - $KUBECTL create ns $Monitoring_ns
    - $KUBECTL label namespaces $Monitoring_ns pod-security.kubernetes.io/enforce=privileged --overwrite=true
    - $HELM install --namespace=$Monitoring_ns --create-namespace -f ./monitoring-operator/charts/monitoring-operator/monitoring-operator-quickstart-sample.yaml monitoring-operator ./monitoring-operator/charts/monitoring-operator
  only: { variables: [ $Monitoring_install == "true" ] }

Check Monitoring Integration Tests:
  <<: *test-case
  stage: monitoring_at
  script:
    - sleep 3m
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Monitoring_ns}" --timeout="900" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Monitoring_ns}"
  only: { variables: [ $Monitoring_install == "true" ] }

Helm Deploy Jaeger:
  <<: *test-case
  stage: airflow_arango_vault_jaeger_helm_deploy
  script:
    - $HELM list -n $Jaeger_ns
    - $KUBECTL delete ns $Jaeger_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Jaeger from CCI ...;
        source .env;
        VERSION=${jaeger:-$Jaeger_version}
      else
        echo CCI integration is disabled, start to get version for Jaeger from applications.yml file...;
        VERSION=$Jaeger_version;
      fi
    - echo FINAL Jaeger version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Jaeger_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Jaeger_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-jaeger.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-jaeger.yml"
    - cat quickstart-samples/quickstart-sample-jaeger.yml
    - zip_url=$(curl $Jaeger_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Jaeger_maven_coordinates/$VERSION/$zip_url
    - mkdir jaeger-chart
    - unzip repo-archive.zip -d jaeger-chart
    - echo Jaeger chart downloaded and unzipped.
    - cd jaeger-chart/*jaeger
    - cat ../../quickstart-samples/quickstart-sample-jaeger.yml >> jaeger/charts/jaeger/jaeger-operator-quickstart-sample.yaml
    - ls -l jaeger/charts/jaeger/
    - $HELM install --namespace=$Jaeger_ns --create-namespace -f ./jaeger/charts/jaeger/jaeger-operator-quickstart-sample.yaml jaeger-operator ./jaeger/charts/jaeger
  only: { variables: [ $Jaeger_install == "true" ] }

Check Jaeger Integration Tests:
  <<: *test-case
  stage: airflow_arango_vault_jaeger_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Jaeger_ns}" --timeout="600" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Jaeger_ns}"
  only: { variables: [ $Jaeger_install == "true" ] }

Helm Deploy Logging:
  <<: *test-case
  stage: rabbit_logging_kafka_helm_deploy
  script:
    - $HELM list -n $Logging_ns
    - $KUBECTL delete ns $Logging_ns --ignore-not-found
    - $KUBECTL delete clusterrole logging-service-operator logging-graylog-cluster-role logging-cluster-role logging-fluentbit-cluster-role logging-fluentbit-aggregator-cluster-role --ignore-not-found
    - $KUBECTL delete clusterrolebindings cloud-events-reader-cluster-reader fluentbit-cluster-reader fluentd-cluster-reader graylog-cluster-role logging-fluentbit-aggregator-cluster-reader logging-service-operator monitoring-agent-logging-plugin-view --ignore-not-found
    - curl --insecure -XDELETE -u admin:admin https://opensearch-cloud-service.platcert01.kubernetes.sdntest.qubership.org/g*
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Logging from CCI ...;
        source .env;
        VERSION=${logging_service:-$Logging_version}
      else
        echo CCI integration is disabled, start to get version for Logging from applications.yml file...;
        VERSION=$Logging_version;
      fi
    - echo FINAL Logging version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Logging_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Logging_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-logging.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-logging.yml"
    - cat quickstart-samples/quickstart-sample-logging.yml
    - zip_url=$(curl $Logging_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Logging_maven_coordinates/$VERSION/$zip_url
    - mkdir logging-chart
    - unzip repo-archive.zip -d logging-chart
    - echo Logging chart downloaded and unzipped.
    - cd logging-chart/*logging-operator
    - cat ../../quickstart-samples/quickstart-sample-logging.yml >> logging-operator/charts/logging-operator/logging-operator-quickstart-sample.yaml
    - ls -l logging-operator/charts/logging-operator/
    - |
      if $KUBECTL create -f ./logging-operator/charts/logging-operator/crds; then
        echo "Logging CRD created successfully."
      else
        $KUBECTL replace -f ./logging-operator/charts/logging-operator/crds;
        echo "Logging CRD replaced successfully."
      fi
    - $KUBECTL create ns $Logging_ns
    - $KUBECTL label namespaces $Logging_ns pod-security.kubernetes.io/enforce=privileged --overwrite=true
    - $HELM install --namespace=$Logging_ns --create-namespace -f ./logging-operator/charts/logging-operator/logging-operator-quickstart-sample.yaml logging-operator ./logging-operator/charts/logging-operator
  only: { variables: [ $Logging_install == "true" ] }

Check Logging Integration Tests:
  <<: *test-case
  stage: rabbit_logging_kafka_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Logging_ns}" --timeout="1500" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Logging_ns}"
  only: { variables: [ $Logging_install == "true" ] }

Helm Deploy Mongo:
  <<: *test-case
  stage: mongo_clickhouse_mistral_redis_helm_deploy
  script:
    - $HELM list -n $Mongo_ns
    - $KUBECTL delete ns $Mongo_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Mongo from CCI ...;
        source .env;
        VERSION=${mongodb:-$Mongo_version}
      else
        echo CCI integration is disabled, start to get version for Mongo from applications.yml file...;
        VERSION=$Mongo_version;
      fi
    - echo FINAL Mongo version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Mongo_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Mongo_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-mongo.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-mongo.yml"
    - cat quickstart-samples/quickstart-sample-mongo.yml
    - zip_url=$(curl $Mongo_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Mongo_maven_coordinates/$VERSION/$zip_url
    - mkdir mongo-chart
    - unzip repo-archive.zip -d mongo-chart
    - echo Mongo chart downloaded and unzipped.
    - cd mongo-chart/*mongodb-operator
    - cat ../../quickstart-samples/quickstart-sample-mongo.yml >> mongodb-operator/charts/mongodb-operator/mongodb-operator-quickstart-sample.yaml
    - ls -l mongodb-operator/charts/mongodb-operator/
    - |
      if $KUBECTL create -f ./mongodb-operator/charts/mongodb-operator/crds; then
        echo "Mongodb CRD created successfully."
      else
        $KUBECTL replace -f ./mongodb-operator/charts/mongodb-operator/crds;
        echo "Mongodb CRD replaced successfully."
      fi
    - $HELM install --namespace=$Mongo_ns --create-namespace -f ./mongodb-operator/charts/mongodb-operator/mongodb-operator-quickstart-sample.yaml mongodb-operator ./mongodb-operator/charts/mongodb-operator
  only: { variables: [ $Mongo_install == "true" ] }

Check Mongo Integration Tests:
  <<: *test-case
  stage: mongo_clickhouse_mistral_redis_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Mongo_ns}" --timeout="1200" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Mongo_ns}"
  only: { variables: [ $Mongo_install == "true" ] }

Helm Deploy Redis:
  <<: *test-case
  stage: mongo_clickhouse_mistral_redis_helm_deploy
  script:
    - $HELM list -n $Redis_ns
    - $KUBECTL delete ns $Redis_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Redis from CCI ...;
        source .env;
        VERSION=${dbaas_redis:-$Redis_version}
      else
        echo CCI integration is disabled, start to get version for Redis from applications.yml file...;
        VERSION=$Redis_version;
      fi
    - echo FINAL Redis version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Redis_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Redis_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-redis.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-redis.yml"
    - cat quickstart-samples/quickstart-sample-redis.yml
    - zip_url=$(curl $Redis_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Redis_maven_coordinates/$VERSION/$zip_url
    - mkdir redis-chart
    - unzip repo-archive.zip -d redis-chart
    - echo Redis chart downloaded and unzipped.
    - cd redis-chart/*redis-operator
    - cat ../../quickstart-samples/quickstart-sample-redis.yml >> redis-operator/charts/redis-operator/redis-operator-quickstart-sample.yaml
    - ls -l redis-operator/charts/redis-operator/
    - |
      if $KUBECTL create -f ./redis-operator/charts/redis-operator/crds; then
        echo "Redis CRD created successfully."
      else
        $KUBECTL replace -f ./redis-operator/charts/redis-operator/crds;
        echo "Redis CRD replaced successfully."
      fi
    - $HELM install --namespace=$Redis_ns --create-namespace -f ./redis-operator/charts/redis-operator/redis-operator-quickstart-sample.yaml redis-operator ./redis-operator/charts/redis-operator
  only: { variables: [ $Redis_install == "true" ] }

Check Redis Integration Tests:
  <<: *test-case
  stage: mongo_clickhouse_mistral_redis_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Redis_ns}" --timeout="200" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Redis_ns}"
  only: { variables: [ $Redis_install == "true" ] }

Helm Deploy Airflow:
  <<: *test-case
  stage: airflow_arango_vault_jaeger_helm_deploy
  script:
    - $HELM list -n $Airflow_ns
    - $KUBECTL delete ns $Airflow_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Airflow from CCI ...;
        source .env;
        VERSION=${airflow:-$Airflow_version}
      else
        echo CCI integration is disabled, start to get version for Airflow from applications.yml file...;
        VERSION=$Airflow_version;
      fi
    - echo FINAL Airflow version $VERSION;
    - chmod +x ./custom_scripts/clean_up_dbaas_dbs.sh
    - ./custom_scripts/clean_up_dbaas_dbs.sh
    - echo Prepearing images...
    - response=$(curl $Airflow_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Airflow_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-airflow.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-airflow.yml"
    - cat quickstart-samples/quickstart-sample-airflow.yml
    - zip_url=$(curl $Airflow_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Airflow_maven_coordinates/$VERSION/$zip_url
    - mkdir airflow-chart
    - unzip repo-archive.zip -d airflow-chart
    - echo Airflow chart downloaded and unzipped.
    - cd airflow-chart/*airflow
    - cat ../../quickstart-samples/quickstart-sample-airflow.yml >> airflow/charts/airflow/airflow-operator-quickstart-sample.yaml
    - ls -l airflow/charts/airflow/
    - $HELM install --namespace=$Airflow_ns --create-namespace -f ./airflow/charts/airflow/airflow-operator-quickstart-sample.yaml airflow-operator ./airflow/charts/airflow
  only: { variables: [ $Airflow_install == "true" ] }

Check Airflow Integration Tests:
  <<: *test-case
  stage: airflow_arango_vault_jaeger_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Airflow_ns}" --timeout="500" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Airflow_ns}"
  only: { variables: [ $Airflow_install == "true" ] }

Helm Deploy Spark:
  <<: *test-case
  stage: streaming_spark_consul_cassandra_helm_deploy
  script:
    - $HELM list -n $Spark_ns
    - $KUBECTL delete ns spark-apps --ignore-not-found
    - $KUBECTL delete ns $Spark_ns --ignore-not-found
    - $KUBECTL create ns spark-apps
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Spark from CCI ...;
        source .env;
        VERSION=${spark_operator_gcp:-$Spark_version}
      else
        echo CCI integration is disabled, start to get version for Spark from applications.yml file...;
        VERSION=$Spark_version;
      fi
    - echo FINAL Spark version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Spark_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Spark_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-spark.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-spark.yml"
    - cat quickstart-samples/quickstart-sample-spark.yml
    - zip_url=$(curl $Spark_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Spark_maven_coordinates/$VERSION/$zip_url
    - mkdir spark-chart
    - unzip repo-archive.zip -d spark-chart
    - echo Spark chart downloaded and unzipped.
    - cd spark-chart/*spark-operator-gcp
    - cat ../../quickstart-samples/quickstart-sample-spark.yml >> sparkoperator/charts/sparkoperator/spark-operator-quickstart-sample.yaml
    - ls -l sparkoperator/charts/sparkoperator/
    - |
      if $KUBECTL create -f ./sparkoperator/charts/sparkoperator/crds; then
        echo "Spark CRD created successfully."
      else
        $KUBECTL replace -f ./sparkoperator/charts/sparkoperator/crds;
        echo "Spark CRD replaced successfully."
      fi
    - $HELM install --namespace=$Spark_ns --create-namespace -f ./sparkoperator/charts/sparkoperator/spark-operator-quickstart-sample.yaml spark-operator ./sparkoperator/charts/sparkoperator
  only: { variables: [ $Spark_install == "true" ] }

Check Spark Integration Tests:
  <<: *test-case
  stage: streaming_spark_consul_cassandra_at
  script:
    - python3 /scripts/external_platform_library_builtIn/validate_tests_result.py --kubeconfig="${KUBECONFIG}" --namespace="${Spark_ns}" --timeout="200" --attempts-for-wait-pod="15"
    - ./custom_scripts/check_pods.sh "${Spark_ns}"
  only: { variables: [ $Spark_install == "true" ] }

Helm Deploy Greenplum:
  <<: *test-case
  stage: greenplum_hue_hive_metastore_trino_helm_deploy
  script:
    - $HELM list -n $Greenplum_ns
    - $KUBECTL delete ns $Greenplum_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Greenplum from CCI ...;
        source .env;
        VERSION=${greenplumdb_operator:-$Greenplum_version}
      else
        echo CCI integration is disabled, start to get version for Greenplum from applications.yml file...;
        VERSION=$Greenplum_version;
      fi
    - echo FINAL Greenplum version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Greenplum_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Greenplum_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-greenplum.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-greenplum.yml"
    - cat quickstart-samples/quickstart-sample-greenplum.yml
    - zip_url=$(curl $Greenplum_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Greenplum_maven_coordinates/$VERSION/$zip_url
    - mkdir greenplum-chart
    - unzip repo-archive.zip -d greenplum-chart
    - echo Greenplum chart downloaded and unzipped.
    - cd greenplum-chart/*greenplumdb-operator
    - cat ../../quickstart-samples/quickstart-sample-greenplum.yml >> greenplumdb-operator/charts/greenplumdb-operator/greenplum-operator-quickstart-sample.yaml
    - ls -l greenplumdb-operator/charts/greenplumdb-operator/
    - |
      if $KUBECTL create -f ./greenplumdb-operator/charts/greenplumdb-operator/crds; then
        echo "Greenplumdb CRD created successfully."
      else
        $KUBECTL replace -f ./greenplumdb-operator/charts/greenplumdb-operator/crds;
        echo "Greenplumdb CRD replaced successfully."
      fi
    - $KUBECTL create ns $Greenplum_ns
    - $KUBECTL label namespace $Greenplum_ns pod-security.kubernetes.io/enforce=privileged
    - $HELM install --namespace=$Greenplum_ns --create-namespace -f ./greenplumdb-operator/charts/greenplumdb-operator/greenplum-operator-quickstart-sample.yaml greenplum-operator ./greenplumdb-operator/charts/greenplumdb-operator
  only: { variables: [ $Greenplum_install == "true" ] }

Check Greenplum Integration Tests:
  <<: *test-case
  stage: greenplum_hue_hive_metastore_trino_at
  script:
    - sleep 10m
    - ./custom_scripts/check_pods.sh "${Greenplum_ns}"
  only: { variables: [ $Greenplum_install == "true" ] }

Helm Deploy Hue:
  <<: *test-case
  stage: greenplum_hue_hive_metastore_trino_helm_deploy
  script:
    - $HELM list -n $Hue_ns
    - $KUBECTL delete ns $Hue_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Hue from CCI ...;
        source .env;
        VERSION=${hue:-$Hue_version}
      else
        echo CCI integration is disabled, start to get version for Hue from applications.yml file...;
        VERSION=$Hue_version;
      fi
    - echo FINAL Hue version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Hue_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Hue_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-hue.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-hue.yml"
    - cat quickstart-samples/quickstart-sample-hue.yml
    - zip_url=$(curl $Hue_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Hue_maven_coordinates/$VERSION/$zip_url
    - mkdir hue-chart
    - unzip repo-archive.zip -d hue-chart
    - echo Hue chart downloaded and unzipped.
    - cd hue-chart/*cloud-db-tool
    - cat ../../quickstart-samples/quickstart-sample-hue.yml >> hue/charts/hue/hue-operator-quickstart-sample.yaml
    - ls -l hue/charts/hue/
    - $HELM install --namespace=$Hue_ns --create-namespace -f ./hue/charts/hue/hue-operator-quickstart-sample.yaml hue-operator ./hue/charts/hue
  only: { variables: [ $Hue_install == "true" ] }

Check Hue Integration Tests:
  <<: *test-case
  stage: greenplum_hue_hive_metastore_trino_at
  script:
    - sleep 1m
    - ./custom_scripts/check_pods.sh "${Hue_ns}"
  only: { variables: [ $Hue_install == "true" ] }

Helm Deploy Cert_manager:
  <<: *test-case
  stage: cert_manager_helm_deploy
  script:
    - $HELM list -n $Cert_manager_ns
    - $KUBECTL delete ns $Cert_manager_ns --ignore-not-found
    - $KUBECTL delete clusterIssuer custom-clusterissuer --ignore-not-found || true
    - $KUBECTL delete clusterIssuer dev-clusterissuer --ignore-not-found || true
    - $KUBECTL delete mutatingwebhookconfiguration cert-manager-operator-webhook --ignore-not-found || true
    - $KUBECTL delete mutatingwebhookconfiguration cert-manager-webhook --ignore-not-found || true
    - $KUBECTL delete ValidatingWebhookConfiguration cert-manager-operator-webhook --ignore-not-found || true
    - $KUBECTL delete ValidatingWebhookConfiguration cert-manager-webhook --ignore-not-found || true
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Cert_manager from CCI ...;
        source .env;
        VERSION=${cert_manager:-$Cert_manager_version}
      else
        echo CCI integration is disabled, start to get version for Cert_manager from applications.yml file...;
        VERSION=$Cert_manager_version;
      fi
    - echo FINAL Cert_manager version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Cert_manager_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Cert_manager_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-cert-manager.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-cert-manager.yml"
    - cat quickstart-samples/quickstart-sample-cert-manager.yml
    - zip_url=$(curl $Cert_manager_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Cert_manager_maven_coordinates/$VERSION/$zip_url
    - mkdir cert-manager-chart
    - unzip repo-archive.zip -d cert-manager-chart
    - echo Cert-manager chart downloaded and unzipped.
    - cd cert-manager-chart/*cert-manager
    - cat ../../quickstart-samples/quickstart-sample-cert-manager.yml >> cert-manager/charts/cert-manager/cert-manager-operator-quickstart-sample.yaml
    - ls -l cert-manager/charts/cert-manager/
    - |
      if $KUBECTL create -f ./cert-manager/charts/cert-manager/crds; then
        echo "Cert-manager CRD created successfully."
      else
        $KUBECTL replace -f ./cert-manager/charts/cert-manager/crds;
        echo "Cert-manager CRD replaced successfully."
      fi
    - $HELM install --namespace=$Cert_manager_ns --create-namespace -f ./cert-manager/charts/cert-manager/cert-manager-operator-quickstart-sample.yaml cert-manager ./cert-manager/charts/cert-manager
  only: { variables: [ $Cert_manager_install == "true" ] }

Check Cert_manager Integration Tests:
  <<: *test-case
  stage: cert_manager_at
  script:
    - sleep 1m
    - chmod +x ./custom_scripts/validate_cluster_issuer.sh
    - ./custom_scripts/validate_cluster_issuer.sh
    - ./custom_scripts/check_pods.sh "${Cert_manager_ns}"
  only: { variables: [ $Cert_manager_install == "true" ] }

Helm Deploy Site_manager:
  <<: *test-case
  stage: site_manager_postgres_opensearch_zookeeper_helm_deploy
  script:
    - $HELM list -n $Site_manager_ns
    - $KUBECTL delete ns $Site_manager_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Site_manager from CCI ...;
        source .env;
        VERSION=${site_manager:-$Site_manager_version}
      else
        echo CCI integration is disabled, start to get version for Site_manager from applications.yml file...;
        VERSION=$Site_manager_version;
      fi
    - echo FINAL Site_manager version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Site_manager_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Site_manager_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-site-manager.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-site-manager.yml"
    - cat quickstart-samples/quickstart-sample-site-manager.yml
    - zip_url=$(curl $Site_manager_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Site_manager_maven_coordinates/$VERSION/$zip_url
    - mkdir site-manager-chart
    - unzip repo-archive.zip -d site-manager-chart
    - echo Site-manager chart downloaded and unzipped.
    - cd site-manager-chart/*site-manager
    - cat ../../quickstart-samples/quickstart-sample-site-manager.yml >> site-manager/charts/site-manager/site-manager-operator-quickstart-sample.yaml
    - ls -l site-manager/charts/site-manager/
    - $HELM install --namespace=$Site_manager_ns --create-namespace -f ./site-manager/charts/site-manager/site-manager-operator-quickstart-sample.yaml site-manager-operator ./site-manager/charts/site-manager
  only: { variables: [ $Site_manager_install == "true" ] }

Check Site_manager Integration Tests:
  <<: *test-case
  stage: site_manager_postgres_opensearch_zookeeper_at
  script:
    - sleep 1m
    - ./custom_scripts/check_pods.sh "${Site_manager_ns}"
  only: { variables: [ $Site_manager_install == "true" ] }

Helm Deploy Hive_metastore:
  <<: *test-case
  stage: greenplum_hue_hive_metastore_trino_helm_deploy
  script:
    - $HELM list -n $Hive_metastore_ns
    - $KUBECTL delete ns $Hive_metastore_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Hive_metastore from CCI ...;
        source .env;
        VERSION=${hive_metastore:-$Hive_metastore_version}
      else
        echo CCI integration is disabled, start to get version for Hive_metastore from applications.yml file...;
        VERSION=$Hive_metastore_version;
      fi
    - echo FINAL Hive_metastore version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Hive_metastore_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Hive_metastore_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-hive-metastore.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-hive-metastore.yml"
    - cat quickstart-samples/quickstart-sample-hive-metastore.yml
    - zip_url=$(curl $Hive_metastore_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Hive_metastore_maven_coordinates/$VERSION/$zip_url
    - mkdir hive-metastore-chart
    - unzip repo-archive.zip -d hive-metastore-chart
    - echo Hive-metastore chart downloaded and unzipped.
    - cd hive-metastore-chart/*hive-metastore
    - cat ../../quickstart-samples/quickstart-sample-hive-metastore.yml >> hivemetastore/charts/hivemetastore/hivemetastore-operator-quickstart-sample.yaml
    - ls -l hivemetastore/charts/hivemetastore/
    - $HELM install --namespace=$Hive_metastore_ns --create-namespace -f ./hivemetastore/charts/hivemetastore/hivemetastore-operator-quickstart-sample.yaml hivemetastore-operator ./hivemetastore/charts/hivemetastore
  only: { variables: [ $Hive_metastore_install == "true" ] }

Check Hive_metastore Integration Tests:
  <<: *test-case
  stage: greenplum_hue_hive_metastore_trino_at
  script:
    - sleep 1m
    - ./custom_scripts/check_pods.sh "${Hive_metastore_ns}"
  only: { variables: [ $Hive_metastore_install == "true" ] }

Helm Deploy Trino:
  <<: *test-case
  stage: greenplum_hue_hive_metastore_trino_helm_deploy
  script:
    - $HELM list -n $Trino_ns
    - $KUBECTL delete ns $Trino_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Trino from CCI ...;
        source .env;
        VERSION=${trino:-$Trino_version}
      else
        echo CCI integration is disabled, start to get version for Trino from applications.yml file...;
        VERSION=$Trino_version;
      fi
    - echo FINAL Trino version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Trino_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Trino_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-trino.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-trino.yml"
    - cat quickstart-samples/quickstart-sample-trino.yml
    - zip_url=$(curl $Trino_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Trino_maven_coordinates/$VERSION/$zip_url
    - mkdir trino-chart
    - unzip repo-archive.zip -d trino-chart
    - echo Trino chart downloaded and unzipped.
    - cd trino-chart/*trino
    - cat ../../quickstart-samples/quickstart-sample-trino.yml >> trino/charts/trino/trino-quickstart-sample.yaml
    - ls -l trino/charts/trino/
    - $HELM install --namespace=$Trino_ns --create-namespace -f ./trino/charts/trino/trino-quickstart-sample.yaml trino-operator ./trino/charts/trino
  only: { variables: [ $Trino_install == "true" ] }

Check Trino Integration Tests:
  <<: *test-case
  stage: greenplum_hue_hive_metastore_trino_at
  script:
    - sleep 1m
    - ./custom_scripts/check_pods.sh "${Trino_ns}"
  only: { variables: [ $Trino_install == "true" ] }

Helm Deploy Profiler:
  <<: *test-case
  stage: volcano_profiler_db_checker_helm_deploy
  script:
    - $HELM list -n $Profiler_ns
    - $KUBECTL delete ns $Profiler_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Profiler from CCI ...;
        source .env;
        VERSION=${Cloud_Diagnostic_Toolset:-$Profiler_version}
      else
        echo CCI integration is disabled, start to get version for Profiler from applications.yml file...;
        VERSION=$Profiler_version;
      fi
    - echo FINAL Profiler version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Profiler_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Profiler_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-profiler.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-profiler.yml"
    - cat quickstart-samples/quickstart-sample-profiler.yml
    - zip_url=$(curl $Profiler_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Profiler_maven_coordinates/$VERSION/$zip_url
    - mkdir profiler-chart
    - unzip repo-archive.zip -d profiler-chart
    - echo Profiler chart downloaded and unzipped.
    - cd profiler-chart/deployment-artifacts
    - cat ../../quickstart-samples/quickstart-sample-profiler.yml >> esc-collector-service/charts/collector-service/profiler-operator-quickstart-sample.yaml
    - cat ../../quickstart-samples/quickstart-sample-profiler.yml >> esc-static-service/charts/static-service/profiler-operator-quickstart-sample.yaml
    - cat ../../quickstart-samples/quickstart-sample-profiler.yml >> esc-test-service/charts/test-service/profiler-operator-quickstart-sample.yaml
    - cat ../../quickstart-samples/quickstart-sample-profiler.yml >> esc-ui-service/charts/ui-service/profiler-operator-quickstart-sample.yaml
    - $HELM install --namespace=$Profiler_ns --create-namespace -f ./esc-collector-service/charts/collector-service/profiler-operator-quickstart-sample.yaml esc-collector-service ./esc-collector-service/charts/collector-service
    - $HELM install --namespace=$Profiler_ns --create-namespace -f ./esc-static-service/charts/static-service/profiler-operator-quickstart-sample.yaml esc-static-service ./esc-static-service/charts/static-service
    - $HELM install --namespace=$Profiler_ns --create-namespace -f ./esc-test-service/charts/test-service/profiler-operator-quickstart-sample.yaml esc-test-service ./esc-test-service/charts/test-service
    - $HELM install --namespace=$Profiler_ns --create-namespace -f ./esc-ui-service/charts/ui-service/profiler-operator-quickstart-sample.yaml esc-ui-service ./esc-ui-service/charts/ui-service
  only: { variables: [ $Profiler_install == "true" ] }

Check Profiler Integration Tests:
  <<: *test-case
  stage: volcano_profiler_db_checker_at
  script:
    - sleep 1m
    - ./custom_scripts/check_pods.sh "${Profiler_ns}"
  only: { variables: [ $Profiler_install == "true" ] }

Helm Deploy Volcano:
  <<: *test-case
  stage: volcano_profiler_db_checker_helm_deploy
  script:
    - $HELM list -n $Volcano_ns
    - $KUBECTL delete ns $Volcano_ns --ignore-not-found
    - |
      if $CCI_INTEGRATION == "true"; then
        echo CCI integration is enabled, start to get version for Volcano from CCI ...;
        source .env;
        VERSION=${volcano:-$Volcano_version}
      else
        echo CCI integration is disabled, start to get version for Volcano from applications.yml file...;
        VERSION=$Volcano_version;
      fi
    - echo FINAL Volcano version $VERSION;
    - echo Prepearing images...
    - response=$(curl $Volcano_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.json"' | grep -v 'href="[^"]*-graph\.json"' | grep -v 'href="[^"]*-cci\.json"' | sed 's/href="//;s/"$//')
    - dd=$(curl $Volcano_maven_coordinates/$VERSION/$response)
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-volcano.yml"
    - python3 custom_scripts/parse_dd.py --dd="$dd" --parameters-file="quickstart-samples/quickstart-sample-volcano.yml"
    - cat quickstart-samples/quickstart-sample-volcano.yml
    - zip_url=$(curl $Volcano_maven_coordinates/$VERSION/ | grep -o 'href="[^"]*\.zip"' | grep -v 'href="[^"]*-cse\.zip"' | sed 's/href="//;s/"$//')
    - curl -o repo-archive.zip $Volcano_maven_coordinates/$VERSION/$zip_url
    - mkdir volcano-chart
    - unzip repo-archive.zip -d volcano-chart
    - echo Volcano chart downloaded and unzipped.
    - cd volcano-chart/*volcano
    - cat ../../quickstart-samples/quickstart-sample-volcano.yml >> volcano/charts/volcano/volcano-operator-quickstart-sample.yaml
    - ls -l volcano/charts/volcano/
    - $KUBECTL create namespace volcano-system
    - $KUBECTL label namespace volcano-system pod-security.kubernetes.io/enforce=baseline
    - $HELM install --namespace=$Volcano_ns --create-namespace -f ./volcano/charts/volcano/volcano-operator-quickstart-sample.yaml volcano-operator ./volcano/charts/volcano
  only: { variables: [ $Volcano_install == "true" ] }

Check Volcano Integration Tests:
  <<: *test-case
  stage: volcano_profiler_db_checker_at
  script:
    - sleep 1m
    - ./custom_scripts/check_pods.sh "${Volcano_ns}"
  only: { variables: [ $Volcano_install == "true" ] }

Helm Deploy DB-Checker:
  <<: *test-case
  stage: volcano_profiler_db_checker_helm_deploy
  script:
    - $KUBECTL delete ns db-checker --ignore-not-found
    - sleep 5s
    - $KUBECTL create namespace db-checker
    - $KUBECTL label namespaces db-checker pod-security.kubernetes.io/enforce=baseline --overwrite=true
    - ./custom_scripts/template.sh  "apps_configuration/cloud_specific.yml" "quickstart-samples/quickstart-sample-db-checker.yml"
    - $KUBECTL apply -f ./quickstart-samples/quickstart-sample-db-checker.yml -n db-checker
  only: { variables: [ $DB_Checker_install == "true" ] }
