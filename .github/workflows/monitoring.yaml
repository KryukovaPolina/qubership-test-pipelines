name: Monitoring Tests

on:
  workflow_call:
    inputs:
      service_branch:
        required: false
        type: string
      versions_file:
        description: 'Path to versions list file'
        type: string
        required: true
      pipeline_branch:
        description: 'Test pipeline branch name'
        type: string
        required: true
      runner_type:
        description: 'Runner type (self-hosted or ubuntu-latest)'
        type: string
        required: false
        default: 'ubuntu-latest'
    secrets:
      AWS_S3_ACCESS_KEY_ID:
        required: true
      AWS_S3_ACCESS_KEY_SECRET:
        required: true

jobs:
  prepare-versions:
    runs-on: ${{inputs.runner_type}}
    outputs:
      versions: ${{steps.process-versions.outputs.versions}}
      previous_version: ${{steps.process-versions.outputs.previous_version}}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: '${{inputs.service_branch}}'
          repository: 'Netcracker/qubership-monitoring-operator'
          path: 'qubership-monitoring-operator'
      - name: Process versions file
        id: process-versions
        # language=bash
        run: |
          versions_str=$(cat qubership-monitoring-operator/${{inputs.versions_file}})
          versions_json=$(echo $versions_str | jq -R -s -c 'split(" ")')
          echo "versions=$versions_json" >> $GITHUB_OUTPUT
          previous_version=$(echo "$versions_json" | jq -r '.[-1]')
          echo "previous_version=$previous_version" >> $GITHUB_OUTPUT

  # ---------- Current service branch ----------
  #3-Clean [LATEST], 4-Upgrade [LATEST] Diff Params
  Clean-Latest-Upgrade-Diff-Params:
    runs-on: ${{inputs.runner_type}}
    name: Clean [LATEST], Upgrade [LATEST] Diff Params
    steps:
      - name: Checkout pipeline
        uses: actions/checkout@v4
        with:
          ref: '${{inputs.pipeline_branch}}'
          repository: 'Netcracker/qubership-test-pipelines'
          path: 'qubership-test-pipelines'
      - name: Create cluster
        uses: ./qubership-test-pipelines/actions/shared/create_cluster
      - name: Install Monitoring
        uses: ./qubership-test-pipelines/actions/monitoring/helm_deploy_monitoring
        with:
          path_to_template: 'templates/monitoring/vm_with_smoke_at.yml'
          service_branch: '${{inputs.service_branch}}'
      - name: Sleep
        run: sleep 2m
      - name: Get CRD
        run: |
          kubectl get crd -n monitoring
          crds=$(kubectl get crd -o jsonpath='{.items[*].metadata.name}' -n monitoring)
          for crd in $crds; do
            echo "Processing CRD: $crd"
            resources=$(kubectl get "$crd" --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{" "}{.metadata.name}{"\n"}{end}')
            if [ -n "$resources" ]; then
              while read -r line; do
                namespace=$(echo "$line" | awk '{print $1}')
                cr_name=$(echo "$line" | awk '{print $2}')
                #echo name $cr_name
                cr_yaml=$(kubectl get "$crd" "$cr_name" -n "$namespace" -o yaml)
                #echo $cr_yaml
                #echo "Got YAML for $crd/$cr_name in namespace $namespace"
                #echo "YAML length: ${#cr_yaml} characters"
              done <<< "$resources"
            else
              echo "No resources found for $crd"
            fi
          done
      - name: Get PlatformMonitoring
        run: kubectl get PlatformMonitoring platformmonitoring -n monitoring -o yaml
      - name: Verify Monitoring installation
        uses: ./qubership-test-pipelines/actions/monitoring/verify_installation_monitoring
        #continue-on-error: true
#      - name: Update to [LATEST] Version With Diff Params
#        uses: ./qubership-test-pipelines/actions/monitoring/helm_deploy_monitoring
#        with:
#          path_to_template: 'templates/monitoring/template.yml'
#          service_branch: '${{inputs.service_branch}}'
#          deploy_mode: upgrade
#      - name: Sleep 1m
#        run: sleep 1m
#      - name: Verify Monitoring upgrade
#        uses: ./qubership-test-pipelines/actions/monitoring/verify_installation_monitoring
