name: 'Verify Installation Action'
description: 'A GitHub Action to verify Kubernetes deployments including status checks, log collection, and test validation.'
inputs:
  namespace:
    description: |
      Kubernetes namespace for service installation
    required: true

  service_ready_max_retries:
    description: |
      Maximum retries for provisioner pod or custom resource to be completed
    required: true

  service_ready_retry_interval:
    description: |
      Delay between provisioner pod / CR check attempts (in seconds)
    required: true

  test_completion_max_retries:
    description: |
      Maximum verification retries for test pod to be completed
    required: true

  test_completion_retry_interval:
    description: |
      Delay between test pod check attempts
    required: true

  service_branch:
    description: |
      Branch in service repository
    required: false

  cr_kind:
    description: |
      Kind of custom resource for checking deploy status.
      CR is used to check the status if status provisioner is missing
    required: false

  cr_name:
    description: |
      Name of custom resource for checking deploy status.
      CR is used to check the status if status provisioner is missing
    required: false

runs:
  using: 'composite'
  steps:
    - name: Create folder for artifacts
      shell: bash
      # language=bash
      run: mkdir -p artifacts

    - name: Initialize error flag
      shell: bash
      # language=bash
      run: echo "ERROR_FLAG=false" >> $GITHUB_ENV

    - name: Check service is ready
      shell: bash
      # language=bash
      run: |
        # ▶️ Check service is ready
        check_provisioner_pod() {
          echo "provisioner_pod=$provisioner_pod"
          for i in {1..${{inputs.service_ready_max_retries}}}; do
            output=$(kubectl get pod $provisioner_pod --ignore-not-found -n ${{inputs.namespace}})
            if [ -z "$output" ]; then
                echo "::error::Provisioner pod $provisioner_pod no longer exists"
                return 1
            fi
            status=$(kubectl get pod $provisioner_pod -n ${{inputs.namespace}} -o jsonpath="{.status.phase}")
            if [[ "$status" == 'Succeeded' ]]; then
                logs=$(kubectl logs $provisioner_pod -n ${{inputs.namespace}})
                if [[ $logs == *"Failed components statuses are []"* ]]; then
                  echo "All components are in succeed status!"
                  echo PROVISIONER LOGS: $logs
                  break
                fi
            fi
            sleep ${{inputs.service_ready_retry_interval}}
          done
          if [[ "$status" != 'Succeeded' ]]; then
            echo "::error:: $provisioner_pod pod has not Succeeded status. Current status: $status"
            return 1
          fi
          logs=$(kubectl logs $provisioner_pod -n ${{inputs.namespace}})
          if [[ $logs != *"Failed components statuses are []"* ]]; then
            echo "::error:: Not all components are in succeed status after ${{inputs.service_ready_max_retries}} attempts"
            echo PODS:
            kubectl get pods -n ${{inputs.namespace}}
            return 1
          fi
        }

        check_cr_status() {
          for i in {1..${{inputs.service_ready_max_retries}}}; do
            #condition_status=$(kubectl get ${{inputs.cr_kind}} ${{inputs.cr_name}} -n ${{inputs.namespace}} -o jsonpath='{.status.conditions[?(@.reason=="ReconcileCycleStatus")].status}')
            cr_yaml=$(kubectl get ${{inputs.cr_kind}} ${{inputs.cr_name}} -n "${{inputs.namespace}}" -o yaml)
            condition=$(echo "$cr_yaml" | yq eval '.status.conditions[] | select(.reason == "ReconcileCycleStatus")' -o=yaml)
            echo  $condition
            if ! [[ -z "$condition" ]]; then
              status=$(echo "$condition" | yq eval '.status' -)
              if [[ "$status" == 'True' ]]; then
                echo "CR ${{inputs.cr_kind}} ${{inputs.cr_name}} has successful status"
                #return 0
              fi
            fi
            sleep ${{inputs.service_ready_retry_interval}}
          done
        }

        provisioner_pod="NOT_FOUND"
        IFS=' ' read -ra pods <<< $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{inputs.namespace}} | tr $'\n' ' ')
        for pod in "${pods[@]}"; do
          if [[ $pod == *"provisioner"* ]]; then
            provisioner_pod=$pod
          fi
        done

        check_result=1

        if [[ $provisioner_pod != "NOT_FOUND" ]]; then
          if ! check_provisioner_pod; then
            check_result=0
          fi
        else
          echo "Status provisioner pod is not found. Checking CR..."
          if ! check_cr_status; then
            check_result=0
          fi
        fi

        if [[ $check_result -eq 0 ]]; then
          echo "::error:: Not all components are in succeed status after ${{inputs.service_ready_max_retries}} attempts"
          echo "$condition"
          echo "ERROR_FLAG=true" >> $GITHUB_ENV
        fi

    - name: Get pods
      shell: bash
      # language=bash
      run: |
        # ▶️ Get pods
        file_name=artifacts/${{inputs.namespace}}_get_pods.txt
        kubectl get pods -n ${{inputs.namespace}}
        kubectl get pods -n ${{inputs.namespace}} > $file_name

    - name: Get yaml from pods
      shell: bash
      # language=bash
      run: |
        # ▶️ Get yaml from pods
        file_name=artifacts/${{inputs.namespace}}_get_pods_yaml.txt
        IFS=' ' read -ra pods <<< $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{inputs.namespace}} | tr $'\n' ' ')
        echo "Yaml files from pods: " > $file_name
        for pod in "${pods[@]}"; do
            echo $pod >> $file_name
            kubectl get pod "$pod" -n ${{inputs.namespace}} -o yaml >> $file_name
        done

    - name: Get events from namespace
      shell: bash
      # language=bash
      run: |
        # ▶️ Get events from namespace
        file_name=artifacts/${{inputs.namespace}}_get_events.txt
        kubectl events -n ${{inputs.namespace}} > $file_name

    - name: Get yaml from PVC
      shell: bash
      # language=bash
      run: |
        # ▶️ Get yaml from PVC
        file_name=artifacts/${{inputs.namespace}}_get_pvc_yaml.txt
        kubectl get pvc -n ${{inputs.namespace}}
        kubectl get pvc -n ${{inputs.namespace}} -o yaml > $file_name

#    - name: Get PV from namespace
#      shell: bash
#      # language=bash
#      run: |
#        # ▶️ Get PV from namespace
#        file_name=artifacts/${{inputs.namespace}}_get_pv.txt
#        kubectl get pv | grep ${{inputs.namespace}}
#        kubectl get pv | grep ${{inputs.namespace}} > $file_name

    - name: Get logs from all containers in pods
      shell: bash
      # language=bash
      run: |
        # ▶️ Get logs from all containers in pods
        file_name=artifacts/${{inputs.namespace}}_log_from_containers.txt
        IFS=' ' read -ra pods <<< $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{inputs.namespace}} | tr $'\n' ' ')
        echo "Logs from all containers in pods: " > $file_name
        for pod in "${pods[@]}"; do
            IFS=' ' read -ra containers <<< $(kubectl get pod "$pod" -n ${{inputs.namespace}} -o jsonpath="{.spec.containers[*].name}")
            for container in "${containers[@]}"; do
              echo $pod $container >> $file_name
              kubectl logs "$pod" -n ${{inputs.namespace}} -c "$container" >> $file_name
              echo '================================================================================' >> $file_name
            done
        done

    - name: Get logs from test pod
      shell: bash
      # language=bash
      run: |
        # ▶️ Get logs from test pod
        file_name=artifacts/${{inputs.namespace}}_tests.txt
        IFS=' ' read -ra pods <<< $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n ${{inputs.namespace}} | tr $'\n' ' ')
        for pod in "${pods[@]}"; do
          if [[ $pod == *"tests"* ]]; then
            test_pod=$pod
          fi
        done
        if ! [[ $test_pod ]]; then
          echo There is no test pod
          exit 0
        fi
        echo "test_pod=$test_pod"
        for i in {1..${{inputs.test_completion_max_retries}}}; do
          echo attempt $i
          status=$(kubectl get pod $test_pod -n ${{inputs.namespace}} -o jsonpath="{.status.phase}")
          echo "$status"
          if [[ "$status" == 'Running' ]]; then
            break
          fi
          sleep ${{inputs.test_completion_retry_interval}}
        done
        for i in {1..${{inputs.test_completion_max_retries}}}; do
          logs=$(kubectl logs $test_pod -n ${{inputs.namespace}})
          if [[ $logs == *"Report: /opt/robot/output/report.html"* ]]; then
            kubectl logs $test_pod -n ${{inputs.namespace}} > $file_name
            break
          fi
          sleep ${{inputs.test_completion_retry_interval}}
        done
        echo 'TEST LOGS:'
        kubectl logs $test_pod -n ${{inputs.namespace}}
        if [[ $logs == *"| FAIL |"* ]]; then
          echo "::error:: Tests failed!"
          echo "ERROR_FLAG=true" >> $GITHUB_ENV
        fi
        kubectl cp $test_pod:/opt/robot/output artifacts/robot-results -n ${{inputs.namespace}}
        ls -la artifacts/robot-results

    - name: Generate artifact name
      if: always()
      shell: bash
      # language=bash
      run: |
        # ▶️ Generate artifact name
        release_name=$(echo ${{inputs.service_branch}})
        if [[ $release_name ]]; then
          release_name=$(echo "_$release_name" | tr '/' '_')
        fi
        ARTIFACT_NAME=${{github.job}}_${{inputs.namespace}}${release_name}_artifacts_$(date -u +'%Y%m%d%H%M%S')
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

    - name: Upload artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts/

    - name: Check job status
      shell: bash
      # language=bash
      run: |
        echo "${{ env.ERROR_FLAG }}"
        if [ "${{ env.ERROR_FLAG }}" == 'true' ]; then
          echo "::error:: Service was installed with errors!"
          exit 1
        fi
