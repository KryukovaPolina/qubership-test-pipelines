# [Vault] Regression sprint pipeline R2024.4 Sprint 1 (qa_kubernetes)
variables:
  PYTHON_IMAGE: pipe_image_latest
  JOB_NAME_CLEAN: ''
  JOB_NAME_UPDATE: ''
  CLOUD_HOST: ${QA_KUBER_HOST}
  CLOUD_TOKEN: ${QA_KUBER_TOKEN}
  DEPLOY_SCRIPT_APP: /scripts/external_platform_library_builtIn/deploy\_with\_deployer.py
  UPGRADE_CRD_SCRIPT: /scripts/external_platform_library_builtIn/upgrade_crd.py
  APPLY_RESOURCES_SCRIPT: /scripts/external_platform_library_builtIn/prepare_restricted_resources.py
  CLEAN_NS_SCRIPT: /scripts/external_platform_library_builtIn/clean_namespace.py
  PATCH_NS: /scripts/external_platform_library_builtIn/patch_ns_restricted.py
  KUBECTL: /builds/PROD.Platform.HA/Infra.Automation/binary/kubectl
  ### ----------------------------------- Cloud specific configuration ----------------------------------- ###
  ### ----------------------------------- ocp_cert_1 configuration --------------------------------------- ###
  # PREFIX: ocp_cert_1
  # JENKINS_URL: ''
  # JENKINS_USER: ''
  # JENKINS_PASS: ''
  # CREDS_IN_DEPLOYER: ''
  # RESTRICTED_USER_APP: ''
  # CLOUD_HOST_OVERALL: ${OCP_CERT_1_HOST}
  # CLOUD_TOKEN_OVERALL: ${OCP_CERT_1_TOKEN}
  # PROJECT: vault-test
  # KUBECONFIG: $OCP_CERT_1_KUBECONFIG
  ### ----------------------------------- platcert01 configuration ----------------------------------- ###
  # PREFIX: platcert01
  # JENKINS_URL: ''
  # JENKINS_USER: ''
  # JENKINS_PASS: ''
  # CREDS_IN_DEPLOYER: ''
  # RESTRICTED_USER_APP: ''
  # CLOUD_HOST_OVERALL: ${PLATCERT01_HOST}
  # CLOUD_TOKEN_OVERALL: ${PLATCERT01_TOKEN_ADMIN}
  # PROJECT: vault-test
  ### ----------------------------------- qa_kubernetes configuration ----------------------------------- ###
  PREFIX: qa_kubernetes
  JENKINS_URL: ''
  JENKINS_USER: ''
  JENKINS_PASS: ''
  CREDS_IN_DEPLOYER: ''
  RESTRICTED_USER_APP: ''
  CLOUD_HOST_OVERALL: ${QA_KUBER_HOST}
  CLOUD_TOKEN_OVERALL: ${QA_KUBER_TOKEN}
  PROJECT: vault-test
  KUBECONFIG: $QA_KUBER_KUBECONFIG
  ### ------------------------------------------- Manifests --------------------------------------------- ###

  LATEST_SPRINT: ''
  PREVIOUS_SPRINT: ''
  N1_RELEASE: ''
  N2_RELEASE: ''
  PREVIOUS_3PARTY: ''
  LATEST_SPRINT_TAG: ''
  PREVIOUS_SPRINT_TAG: ''

stages:
  - clean_previous_sprint_restricted
  - upgrade_from_previous_sprint_to_latest_sprint_restricted
  - clean_latest_sprint_restricted
  - clean_n2_release
  - upgrade_from_n2_release_to_latest_sprint
  - clean_n1_release
  - upgrade_from_n1_release_to_latest_sprint
  - clean_previous_sprint
  - upgrade_from_previous_sprint_to_latest_sprint
  - clean_latest_sprint
  - upgrade_latest_sprint_diff_params
  - clean_latest_sprint_dev-mode
  - clean_previous_sprint_consul-server-connect
  - upgrade_from_previous_sprint_to_latest_sprint_consul-server-connect
  - clean_latest_sprint_tls-secrets
  - upgrade_latest_sprint_tls-certs
  - clean_latest_sprint_tls
  - clean_latest_sprint_consul-server-connect
  - upgrade_latest_sprint_from_non-tls_to_tls
  - clean_previous_3party
  - migration_from_previous_3party_to_latest_sprint
  - create_report

default:
  before_script:
    - pip config set global.index-url qubership.org/api/pypi/pypi_python_org.pypi.proxy/simple
    - pip config set global.trusted-host dockerhub.qubership.org
    - python3 -m pip install --upgrade pip
    - pip install --no-cache-dir -r requirements.txt
    - apk add openssh-client --update-cache --repository ${REPOSITORY_URL} --allow-untrusted
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - chmod +x $KUBECTL
    - echo "$KUBECONFIG" > kubeconfig.env
    - export KUBECONFIG=/builds/PROD.Platform.HA/Infra.Automation/kubeconfig.env


.test-case: &test-case
  image: ${PYTHON_IMAGE}
  extends: .check_state_logs_script.run
  variables:
    CLOUD_HOST: ${CLOUD_HOST_OVERALL}
    CLOUD_TOKEN: ${CLOUD_TOKEN_OVERALL}
    ARRAY_NS: ${PROJECT}
    ALLOWED_RESTARTS_AMOUNT: 2
    ALLOWED_ERROR_LOGS_AMOUNT: 100
  tags:
    - ''
  allow_failure: true
  when: on_success


include:
  - project: 'PROD.Platform.HA/Infra.Automation'
    ref: pipe_image
    file: 'api2.yaml'


# Restricted
1-Clean [PREVIOUS_SPRINT] Restricted:
  <<: *test-case
  stage: clean_previous_sprint_restricted
  script:
    - python3 "${CLEAN_NS_SCRIPT}" --cloud-token="${CLOUD_TOKEN}" --cloud-host="${CLOUD_HOST}" --cloud-namespace="${PROJECT}" --cr-list="vaultservices"
    - python3 "${APPLY_RESOURCES_SCRIPT}" --cloud-host="${CLOUD_HOST}" --cloud-token="${CLOUD_TOKEN}" --namespace="${PROJECT}" --crd-tag="${PREVIOUS_SPRINT_TAG}" --service="vault"
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_restricted_old.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_UPDATE}" --jenkins-url="${JENKINS_URL}" --os-creds="${RESTRICTED_USER_APP}" --artifact="${PREVIOUS_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Rolling Update"
  only: { variables: [ $RESTRICTED_USER_APP != "" ] }


2-Upgrade From [PREVIOUS_SPRINT] To [LATEST_SPRINT] Restricted:
  <<: *test-case
  stage: upgrade_from_previous_sprint_to_latest_sprint_restricted
  script:
    - python3 "${UPGRADE_CRD_SCRIPT}" --cloud-host="${CLOUD_HOST}" --cloud-token="${CLOUD_TOKEN}" --crd-tag="${LATEST_SPRINT_TAG}" --service="vault"
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_restricted_old.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_UPDATE}" --jenkins-url="${JENKINS_URL}" --os-creds="${RESTRICTED_USER_APP}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Rolling Update"
    - !reference [.template_job_status, script]
  only: { variables: [ $RESTRICTED_USER_APP != "" ] }


3-Clean [LATEST_SPRINT] Restricted:
  <<: *test-case
  stage: clean_latest_sprint_restricted
  script:
    - python3 "${CLEAN_NS_SCRIPT}" --cloud-token="${CLOUD_TOKEN}" --cloud-host="${CLOUD_HOST}" --cloud-namespace="${PROJECT}" --cr-list="vaultservices"
    - python3 "${APPLY_RESOURCES_SCRIPT}" --cloud-host="${CLOUD_HOST}" --cloud-token="${CLOUD_TOKEN}" --namespace="${PROJECT}" --crd-tag="${LATEST_SPRINT_TAG}" --service="vault"
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_restricted_new.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_CLEAN}" --jenkins-url="${JENKINS_URL}" --os-creds="${RESTRICTED_USER_APP}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Clean Deploy"
    - !reference [.template_job_status, script]
  only: { variables: [ $RESTRICTED_USER_APP != "" ] }


4-Clean [N2_RELEASE]:
  <<: *test-case
  stage: clean_n2_release
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_release_n-2.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_CLEAN}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${N2_RELEASE}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Clean Deploy"


5-Upgrade From [N2_RELEASE] To [LATEST_SPRINT]:
  <<: *test-case
  stage: upgrade_from_n2_release_to_latest_sprint
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_release_n-2.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_UPDATE}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Rolling Update"


6-Clean [N1_RELEASE]:
  <<: *test-case
  stage: clean_n1_release
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_release.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_CLEAN}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${N1_RELEASE}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Clean Deploy"


7-Upgrade From [N1_RELEASE] To [LATEST_SPRINT]:
  <<: *test-case
  stage: upgrade_from_n1_release_to_latest_sprint
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_release.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_UPDATE}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Rolling Update"


8-Clean [PREVIOUS_SPRINT]:
  <<: *test-case
  stage: clean_previous_sprint
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_old_sprint.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_CLEAN}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${PREVIOUS_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Clean Deploy"


9-Upgrade From [PREVIOUS_SPRINT] To [LATEST_SPRINT]:
  <<: *test-case
  stage: upgrade_from_previous_sprint_to_latest_sprint
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_old_sprint.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_UPDATE}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Rolling Update"


10-Clean [LATEST_SPRINT]:
  <<: *test-case
  stage: clean_latest_sprint
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_new.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_CLEAN}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Clean Deploy"


11-Upgrade [LATEST_SPRINT] Diff Params:
  <<: *test-case
  stage: upgrade_latest_sprint_diff_params
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/update_resources.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_UPDATE}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Rolling Update"


12-Clean [LATEST_SPRINT] Dev mode:
  <<: *test-case
  stage: clean_latest_sprint_dev-mode
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_dev.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_CLEAN}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Clean Deploy"


13-Clean [PREVIOUS_SPRINT] consul-server connect:
  <<: *test-case
  stage: clean_previous_sprint_consul-server-connect
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/Clean_with_consul_server_old.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_CLEAN}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${PREVIOUS_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Clean Deploy"


14-Upgrade From [PREVIOUS_SPRINT] To [LATEST_SPRINT] consul-server connect:
  <<: *test-case
  stage: upgrade_from_previous_sprint_to_latest_sprint_consul-server-connect
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/Clean_with_consul_server_old.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_UPDATE}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Rolling Update"


15-Clean [LATEST_SPRINT] TLS Secrets:
  <<: *test-case
  stage: clean_latest_sprint_tls-secrets
  script:
    - python3 "${CLEAN_NS_SCRIPT}" --cloud-token="${CLOUD_TOKEN}" --cloud-host="${CLOUD_HOST}" --cloud-namespace="${PROJECT}" --cr-list="vaultservices"
    - $KUBECTL create -f ./resources/vault_tls_secret.yml -n ${PROJECT} || true
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/Clean_tls_precreated_secrets.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_UPDATE}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Rolling Update" --request-type="post"


16-Upgrade [LATEST_SPRINT] TLS Certs:
  <<: *test-case
  stage: upgrade_latest_sprint_tls-certs
  script:
    - $KUBECTL delete secrets vault-service-server-tls-secret -n ${PROJECT} || true
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/Update_tls_specified_certs.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_UPDATE}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Rolling Update" --request-type="post"


17-Clean [LATEST_SPRINT] TLS:
  <<: *test-case
  stage: clean_latest_sprint_tls
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/Clean_tls_cert_manager.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_CLEAN}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Clean Deploy"


18-Clean [LATEST_SPRINT] consul-server connect:
  <<: *test-case
  stage: clean_latest_sprint_consul-server-connect
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/Clean_with_consul_server_new.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_CLEAN}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Clean Deploy"


19-Upgrade [LATEST_SPRINT] From Non-TLS To TLS:
  <<: *test-case
  stage: upgrade_latest_sprint_from_non-tls_to_tls
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/Upgrade_to_tls_cert_manager.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_UPDATE}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Rolling Update"


20-Clean [PREVIOUS_3PARTY]:
  <<: *test-case
  stage: clean_previous_3party
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_old_3party.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_CLEAN}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${PREVIOUS_3PARTY}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Clean Deploy"


21-Migration From [PREVIOUS_3PARTY] To [LATEST_SPRINT]:
  <<: *test-case
  stage: migration_from_previous_3party_to_latest_sprint
  script:
    - python3 "${DEPLOY_SCRIPT_APP}" -f "./templates-example/vault/${PREFIX}/clean_old_3party.yml" --jenkins-user="${JENKINS_USER}" --jenkins-pass="${JENKINS_PASS}" --job-name="${JOB_NAME_UPDATE}" --jenkins-url="${JENKINS_URL}" --os-creds="${CREDS_IN_DEPLOYER}" --artifact="${LATEST_SPRINT}" --project="${PREFIX}-${PROJECT}" --deploy-mode="Rolling Update"

Report:
  image: ${PYTHON_IMAGE}
  tags:
    - ''
  when: manual
  stage: create_report
  script:
    - python3 ${REPORT_SCRIPT} --pipeline_id="${CI_PIPELINE_ID}" --token="${GIT_TOKEN}" --webex-room-id="${WEBEX_CI_ROOM_ID}" --webex-token="${WEBEX_CI_TOKEN}" --versions="LATEST_SPRINT=${LATEST_SPRINT},PREVIOUS_SPRINT=${PREVIOUS_SPRINT},N1_RELEASE=${N1_RELEASE},N2_RELEASE=${N2_RELEASE}"
  artifacts:
    paths:
      - "*.html"
